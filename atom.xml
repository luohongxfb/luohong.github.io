<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>所谓向日葵族&#39;s Blog</title>
  
  <subtitle>Empty page presents more possibilities.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunflowercoder.com/"/>
  <updated>2019-09-19T11:03:57.880Z</updated>
  <id>https://sunflowercoder.com/</id>
  
  <author>
    <name>所谓向日葵族</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android篇 Activity共享元素跳转</title>
    <link href="https://sunflowercoder.com/Android%E7%AF%87-Activity%E5%85%B1%E4%BA%AB%E5%85%83%E7%B4%A0%E8%B7%B3%E8%BD%AC/"/>
    <id>https://sunflowercoder.com/Android篇-Activity共享元素跳转/</id>
    <published>2019-09-19T03:09:08.000Z</published>
    <updated>2019-09-19T11:03:57.880Z</updated>
    
    <content type="html"><![CDATA[<p>什么叫Activity共享元素跳转？我们来看看下面的效果，其实就是在这个转场动画中，整个子布局都是共享元素，当然也可以是图片和文字的任何控件，具体怎么实现这种效果呢？<br><img src="/Android篇-Activity共享元素跳转/19-09-19-18-17-09_01.gif"></p><p><em>以MainActivity跳转到HomeDetailActivity为例。</em></p><p><strong>第一步</strong> 在需要跳转到HomeDetailActivity设置共享的元素设置transtionName，可以在xml中设置<code>android:transitionName</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/rl_container"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:transitionName</span>=<span class="string">"CONTENT"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>或者在java代码中用<code>ViewCompat.setTransitionName(@NonNull View view, String transitionName)</code>设置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewCompat.setTransitionName(mViewBinding.rlContainer, <span class="string">"CONTENT"</span>);</span><br></pre></td></tr></table></figure></p><p><strong>第二步</strong> 在开始跳转的MainActivity增加转场过渡<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ActivityOptionsCompat activityOptions = ActivityOptionsCompat.makeSceneTransitionAnimation(</span><br><span class="line">        <span class="keyword">this</span>, <span class="keyword">new</span> Pair&lt;View, String&gt;(v, <span class="string">"CONTENT"</span>));</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, HomeDetailActivity.class);</span><br><span class="line"><span class="comment">// ActivityCompat是android支持库中用来适应不同android版本的</span></span><br><span class="line">ActivityCompat.startActivity(<span class="keyword">this</span>, intent, activityOptions.toBundle());</span><br></pre></td></tr></table></figure></p><p>多个控件过渡可以在后面增加多个<code>Pair&lt;View, String&gt;(View v, String transtionName)</code><br>OK  结束啦。试一下可以实现完美的转场啦~~~<br>那怎么退出来的时候还保持转场回来呢？</p><p><strong>第三步</strong> 结束转场的HomeDetailActivity，在按物理返回键，以及返回按钮的地方加上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">21</span>) &#123;</span><br><span class="line">    finishAfterTransition();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    finish();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当HomeDetailActivity结束转场的过程中，你会发现<strong>出现背景黑屏</strong>的问题，解决办法：在styles.xml配置一个透明背景的样式并配置给HomeDetailActivity。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"DetailActivityStyle"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@color/tran_white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在<code>colos.xml</code>加上<code>&lt;color name=&quot;tran_white&quot;&gt;#00FFFFFF&lt;/color&gt;</code><br>AndroidManifest.xml给注册的HomeDetailActivity配置透明背景样式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".HomeDetailActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/DetailActivityStyle"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>这种处理方法<strong>在7.0及以下的设备还是会出现黑屏情况</strong>。。（QAQ不知道是不是三星Galaxy太强硬嗯。。）<br>小编采用的终极解决办法是在HomeDetailActivity结束时，给window设置一个透明背景图片，即java代码关闭时更改为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">21</span>) &#123;</span><br><span class="line">   # 给window设置透明背景图片</span><br><span class="line">    ColorDrawable colorDrawable = <span class="keyword">new</span> ColorDrawable();</span><br><span class="line">    colorDrawable.setColor(getResources().getColor(R.color.white));</span><br><span class="line">    colorDrawable.setAlpha(<span class="number">0</span>);</span><br><span class="line">    getWindow().setBackgroundDrawable(colorDrawable);</span><br><span class="line"></span><br><span class="line">    finishAfterTransition();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    finish();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么叫Activity共享元素跳转？我们来看看下面的效果，其实就是在这个转场动画中，整个子布局都是共享元素，当然也可以是图片和文字的任何控件，具体怎么实现这种效果呢？&lt;br&gt;&lt;img src=&quot;/Android篇-Activity共享元素跳转/19-09-19-18-17-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python生成requirements.txt方法</title>
    <link href="https://sunflowercoder.com/python%E7%94%9F%E6%88%90requirements-txt%E6%96%B9%E6%B3%95/"/>
    <id>https://sunflowercoder.com/python生成requirements-txt方法/</id>
    <published>2019-09-17T09:57:53.000Z</published>
    <updated>2019-09-17T11:17:24.895Z</updated>
    
    <content type="html"><![CDATA[<p>python项目如何在另一个环境上重新构建项目所需要的运行环境依赖包？<br>使用的时候边记载是个很麻烦的事情，总会出现遗漏的包的问题，这个时候手动安装也很麻烦，不能确定代码报错的需要安装的包是什么版本。这些问题，requirements.txt都可以解决！</p><p>生成requirements.txt，有两种方式：</p><p>第一种 适用于<strong>单虚拟环境的情况：</strong>：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></p><p>为什么只适用于单虚拟环境？因为这种方式，会将环境中的依赖包全都加入，如果使用的全局环境，则下载的所有包都会在里面，不管是不时当前项目依赖的，如下图<br><img src="/python生成requirements-txt方法/1568714257.jpg"></p><p>当然这种情况并不是我们想要的，当我们使用的是全局环境时，可以使用第二种方法。</p><p>第二种 <strong>(推荐)</strong> 使用<code>pipreqs</code>，github地址为：<a href="https://github.com/bndr/pipreqs" target="_blank" rel="noopener">https://github.com/bndr/pipreqs</a><br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">pip install pipreqs</span><br><span class="line"># 在当前目录生成</span><br><span class="line">pipreqs . --encoding=utf8 --force</span><br></pre></td></tr></table></figure></p><p>注意<code>--encoding=utf8</code>为使用utf8编码，不然可能会报UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0xae in position 406: illegal multibyte sequence 的错误。</p><p><code>--force</code>强制执行，当 生成目录下的requirements.txt存在时覆盖。</p><p>当当当，可以看见我依赖的只有这些啦</p><img src="/python生成requirements-txt方法/1568718990.jpg"><p>使用requirements.txt安装依赖的方式：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;python项目如何在另一个环境上重新构建项目所需要的运行环境依赖包？&lt;br&gt;使用的时候边记载是个很麻烦的事情，总会出现遗漏的包的问题，这个时候手动安装也很麻烦，不能确定代码报错的需要安装的包是什么版本。这些问题，requirements.txt都可以解决！&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="python" scheme="https://sunflowercoder.com/categories/python/"/>
    
    
      <category term="requirements.txt" scheme="https://sunflowercoder.com/tags/requirements-txt/"/>
    
  </entry>
  
  <entry>
    <title>python读写Excel</title>
    <link href="https://sunflowercoder.com/python%E8%AF%BB%E5%86%99Excel/"/>
    <id>https://sunflowercoder.com/python读写Excel/</id>
    <published>2019-08-19T06:10:43.000Z</published>
    <updated>2019-09-17T08:11:28.017Z</updated>
    
    <content type="html"><![CDATA[<p>最近小编在处理各种.xlsx表格的数据处理和计算的工作，目前python用于操作表格的模块有很多，功能各有千秋。本文主要讲的是xlwt用于写，xlrt用于读。</p><h2 id="表格写入"><a href="#表格写入" class="headerlink" title="表格写入"></a>表格写入</h2><p>简单的写入功能可用<code>xlwt</code>模块，写入功能的难点在于写入合并的单元格。<strong>单元格的下标都是从0开始</strong>。</p><blockquote><p>xlwt官方API：<a href="https://xlwt.readthedocs.io/en/latest/api.html" target="_blank" rel="noopener">https://xlwt.readthedocs.io/en/latest/api.html</a></p></blockquote><p>安装：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xlwt</span><br></pre></td></tr></table></figure></p><ul><li><p>新建workbook:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wk=xlwt.Workbook()</span><br></pre></td></tr></table></figure></li><li><p>新建sheet：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sheet1 = wk.add_sheet(<span class="string">"数据"</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li><p>写入普通单元格：写入第3行，第2列</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sheet1.write(<span class="number">2</span> , <span class="number">1</span>, <span class="string">"liebao"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数一：行下标</span></span><br><span class="line"><span class="comment"># 参数二：列下标</span></span><br><span class="line"><span class="comment"># 参数三：写入的内容</span></span><br></pre></td></tr></table></figure></li><li><p>写入合并的单元格：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列合并：写入第2行，第2~5列</span></span><br><span class="line">sheet1.write_merge(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="string">"列合并"</span>)</span><br><span class="line"><span class="comment"># 行合并：写入第1~3行，第3列</span></span><br><span class="line">sheet1.write_merge(<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">"行合并"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数一：开始的行下标</span></span><br><span class="line"><span class="comment"># 参数二：结束的行下标（包含）</span></span><br><span class="line"><span class="comment"># 参数三：开始的列下标</span></span><br><span class="line"><span class="comment"># 参数四：结束的列下标（包含）</span></span><br><span class="line"><span class="comment"># 参数五：写入的内容</span></span><br></pre></td></tr></table></figure></li><li><p>保存至表格文件</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wk.save(file_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数一：保存的表格文件名或者流</span></span><br></pre></td></tr></table></figure></li></ul><p>但是我们的单元格怎么设置样式呢？一般的单元格都会调整样式，如合并居中、设置字体大小、背景色等等？</p><p>如何写入公式？</p><p>如实现下面的</p><img src="/python读写Excel/1568706718.jpg"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xlwt_excel</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    表格写入</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 获得可写入的workbook对象</span></span><br><span class="line">    wk = xlwt.Workbook()</span><br><span class="line">    <span class="comment"># 增加一个sheet 并且单元格可重写</span></span><br><span class="line">    sheet1 = wk.add_sheet(sheet_name, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并的行：写入合并的第一、二行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(row0_2)):</span><br><span class="line">        sheet1.write_merge(<span class="number">0</span>, <span class="number">1</span>, i, i, row0_2[i], get_style())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入单个最后一列的第一、二行：分开的两行消耗（元） 折前</span></span><br><span class="line">    sheet1.write(<span class="number">0</span>, len(row0_2), simple_end_col[<span class="number">0</span>], get_style())</span><br><span class="line">    sheet1.write(<span class="number">1</span>, len(row0_2), simple_end_col[<span class="number">1</span>], get_style())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并的行：写第一列</span></span><br><span class="line">    sheet1.write_merge(<span class="number">2</span>, len(liebao_accounts) + <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, colum0[<span class="number">0</span>], get_style())</span><br><span class="line">    sheet1.write_merge(<span class="number">2</span> + len(liebao_accounts), len(liebao_accounts) + len(wifi_accounts) + <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, colum0[<span class="number">1</span>],</span><br><span class="line">                       get_style())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入单个单元格：写猎豹数据：</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">0</span>, len(liebao_accounts)):</span><br><span class="line">        sheet1.write(<span class="number">2</span> + index, <span class="number">1</span>, liebao_accounts[index][<span class="string">'app'</span>], get_style(<span class="literal">True</span>))</span><br><span class="line">        sheet1.write(<span class="number">2</span> + index, <span class="number">2</span>, liebao_accounts[index][<span class="string">'system'</span>], get_style(<span class="literal">True</span>))</span><br><span class="line">        sheet1.write(<span class="number">2</span> + index, <span class="number">3</span>, liebao_accounts[index][<span class="string">'account'</span>], get_style(<span class="literal">True</span>))</span><br><span class="line">        sheet1.write(<span class="number">2</span> + index, <span class="number">4</span>, float(liebao_accounts[index][<span class="string">'spend'</span>]), get_style(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入单个单元格：写入wifi数据</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">0</span>, len(wifi_accounts)):</span><br><span class="line">        sheet1.write(<span class="number">2</span> + len(liebao_accounts) + index, <span class="number">1</span>, wifi_accounts[index][<span class="string">'app'</span>], get_style(<span class="literal">True</span>))</span><br><span class="line">        sheet1.write(<span class="number">2</span> + len(liebao_accounts) + index, <span class="number">2</span>, wifi_accounts[index][<span class="string">'system'</span>], get_style(<span class="literal">True</span>))</span><br><span class="line">        sheet1.write(<span class="number">2</span> + len(liebao_accounts) + index, <span class="number">3</span>, wifi_accounts[index][<span class="string">'account'</span>], get_style(<span class="literal">True</span>))</span><br><span class="line">        sheet1.write(<span class="number">2</span> + len(liebao_accounts) + index, <span class="number">4</span>, float(wifi_accounts[index][<span class="string">'spend'</span>]), get_style(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入数字格式化</span></span><br><span class="line">    sheet1.write_merge(<span class="number">2</span> + len(liebao_accounts) + len(wifi_accounts), <span class="number">2</span> + len(liebao_accounts) + len(wifi_accounts), <span class="number">0</span>,</span><br><span class="line">                       <span class="number">1</span>, datetime.now(), get_style(num_format=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入合并列：合计</span></span><br><span class="line">    sheet1.write_merge(<span class="number">2</span> + len(liebao_accounts) + len(wifi_accounts), <span class="number">2</span> + len(liebao_accounts) + len(wifi_accounts), <span class="number">2</span>,</span><br><span class="line">                       <span class="number">3</span>, <span class="string">"合计"</span>, get_style())</span><br><span class="line">    <span class="comment"># 写入公式：求和消耗总和</span></span><br><span class="line">    sheet1.write(<span class="number">2</span> + len(liebao_accounts) + len(wifi_accounts), <span class="number">4</span>,</span><br><span class="line">                 xlwt.Formula(<span class="string">"SUM(E3:E%d)"</span> % (<span class="number">3</span> + len(liebao_accounts) + len(wifi_accounts) - <span class="number">1</span>)), get_style())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入超链接</span></span><br><span class="line">    sheet1.write_merge(<span class="number">3</span> + len(liebao_accounts) + len(wifi_accounts), <span class="number">3</span> + len(liebao_accounts) + len(wifi_accounts), <span class="number">0</span>,</span><br><span class="line">                       <span class="number">4</span>, xlwt.Formula(<span class="string">'HYPERLINK("https://sunflowercoder.com/";"更多好文 点击查看我的博客")'</span>),</span><br><span class="line">                       get_style(bold=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改列宽度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(row0_2) + <span class="number">1</span>):</span><br><span class="line">        sheet1.col(i).width = <span class="number">150</span> * <span class="number">30</span>  <span class="comment"># 定义列宽</span></span><br><span class="line">    sheet1.col(<span class="number">0</span>).width = <span class="number">50</span> * <span class="number">30</span>  <span class="comment"># 定义列宽</span></span><br><span class="line">    sheet1.col(<span class="number">2</span>).width = <span class="number">200</span> * <span class="number">30</span>  <span class="comment"># 定义列宽</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存到文件</span></span><br><span class="line">    wk.save(file_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_style</span><span class="params">(simple_ceil=False, num_format=False, bold=False)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    设置表格样式</span></span><br><span class="line"><span class="string">    :param simple_ceil: 是否为 普通单元格，默认为非普通单元格</span></span><br><span class="line"><span class="string">    :param num_format: 是否为需要格式化的数字单元格</span></span><br><span class="line"><span class="string">    :param bold: 是否需要加粗</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    style = xlwt.XFStyle()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> simple_ceil:</span><br><span class="line">        <span class="comment"># 字体</span></span><br><span class="line">        font = xlwt.Font()</span><br><span class="line">        font.name = <span class="string">"宋体"</span></span><br><span class="line">        font.bold = bold</span><br><span class="line">        font.underline = <span class="literal">False</span></span><br><span class="line">        font.italic = <span class="literal">False</span></span><br><span class="line">        font.colour_index = <span class="number">0</span></span><br><span class="line">        font.height = <span class="number">200</span>  <span class="comment"># 200为10号字体</span></span><br><span class="line">        style.font = font</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 单元格居中</span></span><br><span class="line">        align = xlwt.Alignment()</span><br><span class="line">        align.horz = xlwt.Alignment.HORZ_CENTER  <span class="comment"># 水平方向</span></span><br><span class="line">        align.vert = xlwt.Alignment.VERT_CENTER  <span class="comment"># 竖直方向</span></span><br><span class="line">        style.alignment = align</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 背景色</span></span><br><span class="line">        pattern = xlwt.Pattern()</span><br><span class="line">        pattern.pattern = xlwt.Pattern.SOLID_PATTERN</span><br><span class="line">        pattern.pattern_fore_colour = xlwt.Style.colour_map[<span class="string">'pale_blue'</span>]  <span class="comment"># 设置单元格背景色为黄色</span></span><br><span class="line">        style.pattern = pattern</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 边框</span></span><br><span class="line">    border = xlwt.Borders()  <span class="comment"># 给单元格加框线</span></span><br><span class="line">    border.left = xlwt.Borders.THIN  <span class="comment"># 左</span></span><br><span class="line">    border.top = xlwt.Borders.THIN  <span class="comment"># 上</span></span><br><span class="line">    border.right = xlwt.Borders.THIN  <span class="comment"># 右</span></span><br><span class="line">    border.bottom = xlwt.Borders.THIN  <span class="comment"># 下</span></span><br><span class="line">    border.left_colour = <span class="number">0x40</span>  <span class="comment"># 边框线颜色</span></span><br><span class="line">    border.right_colour = <span class="number">0x40</span></span><br><span class="line">    border.top_colour = <span class="number">0x40</span></span><br><span class="line">    border.bottom_colour = <span class="number">0x40</span></span><br><span class="line">    style.borders = border</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数字格式化</span></span><br><span class="line">    <span class="keyword">if</span> num_format:</span><br><span class="line">        style.num_format_str = <span class="string">'M/D/YY'</span>  <span class="comment"># 选项: D-MMM-YY, D-MMM-YY, D-MMM, MMM-YY, h:mm, h:mm:ss, h:mm, h:mm:ss, M/D/YY h:mm, mm:ss, [h]:mm:ss, mm:ss.0</span></span><br><span class="line">    <span class="keyword">return</span> style</span><br></pre></td></tr></table></figure><h2 id="表格读取"><a href="#表格读取" class="headerlink" title="表格读取"></a>表格读取</h2><p>读取比较麻烦的是合并单元格的内容，Python读取Excel中单元格的内容返回的有5种类型，ctype分别为 :  0 empty，1 string，2 number， 3 date，4 boolean，5 error</p><blockquote><p>xlrd官方API：<a href="https://xlrd.readthedocs.io/en/latest/api.html#module-xlrd" target="_blank" rel="noopener">https://xlrd.readthedocs.io/en/latest/api.html#module-xlrd</a></p></blockquote><p>安装：<code>pip install xlrd</code></p><p>读取示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xlrd_excel</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    表格读取</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    wb = xlrd.open_workbook(filename=file_name, formatting_info=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 获取所有表格名字</span></span><br><span class="line">    print(<span class="string">"所有的表格名："</span>, wb.sheet_names())</span><br><span class="line">    <span class="comment"># 通过索引获取表格</span></span><br><span class="line">    sheet1 = wb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 通过名字获取表格</span></span><br><span class="line">    <span class="comment"># sheet2 = wb.sheet_by_name(sheet_name)</span></span><br><span class="line">    <span class="comment"># 输出表格的名字，行数和列数</span></span><br><span class="line">    print(<span class="string">"第一个表格名："</span>, sheet1.name, <span class="string">"   行数："</span>, sheet1.nrows, <span class="string">"  列数："</span>, sheet1.ncols)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取行、列的内容</span></span><br><span class="line">    rows = sheet1.row_values(<span class="number">0</span>)  <span class="comment"># 获取第一行的内容</span></span><br><span class="line">    cols = sheet1.col_values(<span class="number">0</span>)  <span class="comment"># 获取第一列内容</span></span><br><span class="line">    print(rows)</span><br><span class="line">    print(cols)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取单元格内容 三种方式</span></span><br><span class="line">    print(sheet1.cell(<span class="number">0</span>, <span class="number">4</span>).value)</span><br><span class="line">    print(sheet1.cell_value(<span class="number">0</span>, <span class="number">4</span>))</span><br><span class="line">    print(sheet1.row(<span class="number">0</span>)[<span class="number">4</span>].value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出合并表格的内容：注意 xlrd.open_workbook()时，必须formatting_info=True，否则merged_cells返回空</span></span><br><span class="line">    merged_cells = sheet1.merged_cells</span><br><span class="line">    print(<span class="string">"合并的单元格："</span>, merged_cells)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> merged_cells:</span><br><span class="line">        <span class="comment"># 合并的单元格为元组形式 如(12, 13, 0, 2) 为(开始的行标，结束的行标，开始的列标，结束的列标) 取值为（开始的行标，开始的列标）即可</span></span><br><span class="line">        print(<span class="string">"合并的单元格"</span>, item, <span class="string">"值为："</span>, sheet1.cell_value(item[<span class="number">0</span>], item[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python读取Excel中单元格的内容返回的有5种类型，ctype分别为 :  0 empty，1 string，2 number， 3 date，4 boolean，5 error</span></span><br><span class="line">    <span class="comment"># 输出日期格式</span></span><br><span class="line">    <span class="keyword">if</span> sheet1.cell_type(<span class="number">12</span>, <span class="number">0</span>) == <span class="number">3</span>:</span><br><span class="line">        date_value = xlrd.xldate_as_tuple(sheet1.cell_value(<span class="number">12</span>, <span class="number">0</span>), wb.datemode)</span><br><span class="line">        print(<span class="string">"日期为："</span>, date_value, )</span><br><span class="line">        print(<span class="string">"日期为（格式为2019-09-17）："</span>, date(*date_value[:<span class="number">3</span>]))</span><br><span class="line">        print(<span class="string">"日期为（格式为2019/09/17）："</span>, date(*date_value[:<span class="number">3</span>]).strftime(<span class="string">'%Y/%m/%d'</span>))</span><br></pre></td></tr></table></figure></p><img src="/python读写Excel/1568707371.jpg"><p><code>xlwt</code>最大的弊端就是不能修改表格只能新增，修改的方法，小编会在后面的文章阐述。</p><p>需要示例代码，点击<a href="/download/ExcelOp.zip">资源下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近小编在处理各种.xlsx表格的数据处理和计算的工作，目前python用于操作表格的模块有很多，功能各有千秋。本文主要讲的是xlwt用于写，xlrt用于读。&lt;/p&gt;
&lt;h2 id=&quot;表格写入&quot;&gt;&lt;a href=&quot;#表格写入&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="python" scheme="https://sunflowercoder.com/categories/python/"/>
    
    
      <category term="xlwt" scheme="https://sunflowercoder.com/tags/xlwt/"/>
    
      <category term="xlrt" scheme="https://sunflowercoder.com/tags/xlrt/"/>
    
      <category term="Excel" scheme="https://sunflowercoder.com/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>gradle错误 解决办法 （汇总 不定期更新）</title>
    <link href="https://sunflowercoder.com/gradle%E9%94%99%E8%AF%AF-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95-%EF%BC%88%E6%B1%87%E6%80%BB-%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>https://sunflowercoder.com/gradle错误-解决办法-（汇总-不定期更新）/</id>
    <published>2019-08-08T09:15:10.000Z</published>
    <updated>2019-08-09T06:46:04.083Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Could-not-find-com-android-tools-build-aapt2-3-3-2-5309881"><a href="#1-Could-not-find-com-android-tools-build-aapt2-3-3-2-5309881" class="headerlink" title="1. Could not find com.android.tools.build:aapt2:3.3.2-5309881"></a>1. Could not find com.android.tools.build:aapt2:3.3.2-5309881</h3><p>build失败，报错</p><img src="/gradle错误-解决办法-（汇总-不定期更新）/1565255955.jpg"><p><strong>解决办法</strong>：在项目下的build.gradle repositories下加入 <code>google()</code></p><a id="more"></a><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.3.2'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-This-version-of-Android-Studio-cannot-open-this-project-please-retry-with-Android-Studio-3-4-or-newer"><a href="#2-This-version-of-Android-Studio-cannot-open-this-project-please-retry-with-Android-Studio-3-4-or-newer" class="headerlink" title="2. This version of Android Studio cannot open this project, please retry with Android Studio 3.4 or newer."></a>2. This version of Android Studio cannot open this project, please retry with Android Studio 3.4 or newer.</h3><p><strong>解决办法</strong>：升级AndroidStudio或者gradle版本降级</p><h3 id="3-Circular-dependency-between-the-following-tasks"><a href="#3-Circular-dependency-between-the-following-tasks" class="headerlink" title="3. Circular dependency between the following tasks:"></a>3. Circular dependency between the following tasks:</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">Circular dependency between the following tasks:</span><br><span class="line">:llib:compileDebugAidl</span><br><span class="line">\--- :llib:compileDebugAidl (*)</span><br><span class="line"></span><br><span class="line">(*) - details omitted (listed previously)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong>：更换项目下repositories的顺序，如<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">'https://jitpack.io'</span></span><br><span class="line">    &#125;</span><br><span class="line">    maven &#123; url <span class="string">"https://dl.bintray.com/thelasterstar/maven/"</span> &#125;</span><br><span class="line"></span><br><span class="line">    google()</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-com-android-ide-common-signing-KeytoolException-Failed-to-read-key"><a href="#4-com-android-ide-common-signing-KeytoolException-Failed-to-read-key" class="headerlink" title="4. com.android.ide.common.signing.KeytoolException: Failed to read key ??????"></a>4. com.android.ide.common.signing.KeytoolException: Failed to read key ??????</h3><p>.properties用来存放app名称或者keystore信息时，出现中文会读取乱码。</p><img src="/gradle错误-解决办法-（汇总-不定期更新）/1565332631.jpg"><p><strong>解决办法</strong>：首先项目的文件编码都改为utf-8</p><img src="/gradle错误-解决办法-（汇总-不定期更新）/42b12aeeed338b410d958d40a6e2013.png"><p>然后取值的时候，如取keystore alias使用<code>new String(KEYSTORE_ALIAS.getBytes(&quot;iso8859-1&quot;), &quot;UTF-8&quot;)</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Could-not-find-com-android-tools-build-aapt2-3-3-2-5309881&quot;&gt;&lt;a href=&quot;#1-Could-not-find-com-android-tools-build-aapt2-3-3-2-5309881&quot; class=&quot;headerlink&quot; title=&quot;1. Could not find com.android.tools.build:aapt2:3.3.2-5309881&quot;&gt;&lt;/a&gt;1. Could not find com.android.tools.build:aapt2:3.3.2-5309881&lt;/h3&gt;&lt;p&gt;build失败，报错&lt;/p&gt;
&lt;img src=&quot;/gradle错误-解决办法-（汇总-不定期更新）/1565255955.jpg&quot;&gt;
&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;：在项目下的build.gradle repositories下加入 &lt;code&gt;google()&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://sunflowercoder.com/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>AndroidStudio打开旧项目报No toolchains found in the NDK toolchains folder for ABI with prefix: mipsel-linux-android</title>
    <link href="https://sunflowercoder.com/AndroidStudio%E6%89%93%E5%BC%80%E6%97%A7%E9%A1%B9%E7%9B%AE%E6%8A%A5No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mipsel-linux-android/"/>
    <id>https://sunflowercoder.com/AndroidStudio打开旧项目报No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mipsel-linux-android/</id>
    <published>2019-08-08T06:38:43.000Z</published>
    <updated>2019-08-08T07:18:02.311Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天从github下了个轮子，从日期看已经发布两年多了，用AndroidStudio打开加载报错<br><strong>No toolchains found in the NDK toolchains folder for ABI with prefix: mipsel-linux-android</strong></p></blockquote><p>很明显跟ndk有关，通过 <strong>File -&gt; Project Structure -&gt; SDK Location</strong>  Android NDK Location就是项目所使用的ndk目录，打开目录下的toolchains</p><img src="/AndroidStudio打开旧项目报No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mipsel-linux-android/1565248270.jpg"><p>确实没有mipsel-linux-android开始的文件名，那这怎么办呢~ </p><p>其实，主要原因是 <strong>新版本的NDK与3.0及以前旧版的Android Gradle plugin插件不兼容</strong>，既然是版本的问题，那么解决的方式有两种：</p><ul><li>更新gradle版本，使用跟其他项目一样的最新版。弊端：以前版本的用法会有一部分在新版本被移除，都需要更改，例如compile改为api/implementation，输出apk名称方式的更改等等。。</li><li>下载旧版的NDK，将其中的toolchain复制到新版的NDK中。</li></ul><p>如果采用更改gradle版本，就在项目下的build.gradle。然后Sync Now，开始改版本更改报出来的种种方法过时错误.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  classpath &apos;com.android.tools.build:gradle:3.3.2&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>采用下载旧版的NDK方式，需要去官网下载旧版，如  <a href="https://developer.android.google.cn/ndk/downloads/older_releases.html" target="_blank" rel="noopener">https://developer.android.google.cn/ndk/downloads/older_releases.html</a> 下载。</p><p>下载完成解压后，将报的错toolchains下缺的mipsel-linux-android开始的文件名的文件粘贴到项目所使用的ndk目录下即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天从github下了个轮子，从日期看已经发布两年多了，用AndroidStudio打开加载报错&lt;br&gt;&lt;strong&gt;No toolchains found in the NDK toolchains folder for ABI with pr
      
    
    </summary>
    
      <category term="Android" scheme="https://sunflowercoder.com/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Git | CentOS 7搭建git服务端</title>
    <link href="https://sunflowercoder.com/Git-CentOS-7%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <id>https://sunflowercoder.com/Git-CentOS-7搭建git服务端/</id>
    <published>2019-08-06T09:10:20.000Z</published>
    <updated>2019-09-18T09:40:34.233Z</updated>
    
    <content type="html"><![CDATA[<p>大多数情况下我们使用github托管，特别是私库免费以后，但是github被黑也会有宕机的时候，那怎么办呀，就是喜欢用git呀，特别是微信小程序的官方编辑器用svn时代码颜色不更改呀（不知道版本更新后是否支持），都不知道改了哪行~😧这个时候我们可以考虑在私有服务器搭建git服务端。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>目前通过<code>yum -y install git</code>安装的git版本为 1.8.3.1。</p><img src="/Git-CentOS-7搭建git服务端/1565083693.jpg"><p>但是<a href="https://mirrors.edge.kernel.org/pub/software/scm/git/" target="_blank" rel="noopener">官方git仓库</a>的最新版目前是2.9.5</p><img src="/Git-CentOS-7搭建git服务端/1565083864.jpg"><a id="more"></a><p>想要安装最新版的git只能下载压缩的源码包安装。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 查看原来是否有git的相关包</span><br><span class="line">rpm -qa|grep git</span><br><span class="line"># 可能的结果为 git-<span class="number">1</span>.<span class="number">8</span>.<span class="number">3</span>.<span class="number">1</span>-<span class="number">20</span>.el7.x86_64</span><br><span class="line"># 删除git包</span><br><span class="line">rpm -e perl-Git</span><br><span class="line">rpm -e git</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">yum install curl-devel expat-devel openssl-devel zlib-devel</span><br><span class="line"></span><br><span class="line"># 下载<span class="number">2</span>.<span class="number">9</span>.<span class="number">5</span>版本压缩包 soft为自建目录</span><br><span class="line"><span class="built_in">cd</span> /usr/local/soft</span><br><span class="line">wget  https://mirrors.edge.kernel.org/pub/software/scm/git/git-<span class="number">2</span>.<span class="number">9</span>.<span class="number">5</span>.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">tar -xzvf git-<span class="number">2</span>.<span class="number">9</span>.<span class="number">5</span>.tar.gz</span><br><span class="line"></span><br><span class="line"># 编译安装</span><br><span class="line"><span class="built_in">cd</span> git-<span class="number">2</span>.<span class="number">9</span>.<span class="number">5</span></span><br><span class="line">make prefix=/usr/local all</span><br><span class="line">make prefix=/usr/local install</span><br></pre></td></tr></table></figure></p><p>当前可通过 <code>./git --version</code>查看<br><img src="/Git-CentOS-7搭建git服务端/1565086093.jpg"></p><p><strong>配置环境变量</strong></p><p><code>vi /etc/profile</code>在最后加入<code>export PATH=/usr/local/soft/git-2.9.5:$PATH</code>，<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">i</span><br><span class="line"></span><br><span class="line">最后加入export <span class="built_in">PATH</span>=/usr/local/soft/git-<span class="number">2</span>.<span class="number">9</span>.<span class="number">5</span>:$<span class="built_in">PATH</span></span><br><span class="line"></span><br><span class="line">Esc :wq</span><br><span class="line"></span><br><span class="line"># 生效环境变量</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>至此安装结束，然后就可以愉快的到处使用啦~</p><h2 id="添加管理git的用户"><a href="#添加管理git的用户" class="headerlink" title="添加管理git的用户"></a>添加管理git的用户</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户git</span><br><span class="line">useradd git</span><br><span class="line"></span><br><span class="line"># 修改用户git的密码（要求&gt;<span class="number">8</span>个字符）输入两遍新密码</span><br><span class="line">passwd git</span><br></pre></td></tr></table></figure><p>通过<code>cd /home &amp;&amp; ls -al</code>可以看见用户已经创建成功</p><img src="/Git-CentOS-7搭建git服务端/1565087656.jpg"><h2 id="使用git"><a href="#使用git" class="headerlink" title="使用git"></a>使用git</h2><p>平常在使用别人的轮子时都是直接使用<code>git clone [https url]</code>到本地，但是我们自己的项目管理时，还可以使用ssh的方式。这两种方式的区别在于https的pull和push时需要输入密码，使用ssh的需要先配置和添加好SSH key就不用每次操作输入密码啦~</p><p><strong>服务端创建仓库示例</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line"></span><br><span class="line">mkdir sunflowercoder-blog.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> sunflowercoder-blog.git</span><br><span class="line"></span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure></p><p>可以看见在/home/git/sunflowercoder-blog.git目录下已经初始化了一个空的git项目</p><img src="/Git-CentOS-7搭建git服务端/1568793618.jpg"><p>没安装git客户端的，自行先去<a href="https://git-scm.com/" target="_blank" rel="noopener">官网</a>下载安装。</p><h3 id="客户端使用http访问"><a href="#客户端使用http访问" class="headerlink" title="客户端使用http访问"></a>客户端使用http访问</h3><p>当前的情况下，已经是可以使用http访问啦。<br><strong>客户端使用http示例</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆项目</span></span><br><span class="line">git <span class="built_in">clone</span> git@[服务端ip地址]:/home/git/sunflowercoder-blog.git</span><br></pre></td></tr></table></figure></p><p>输入git用户的密码后，等待传输结束即可。<br><img src="/Git-CentOS-7搭建git服务端/1568793970.jpg"></p><p>创建README.md，上传到服务器，并查看日志。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> sunflowercoder-blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建README.md</span></span><br><span class="line">touch README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到缓存</span></span><br><span class="line">git commit -m <span class="string">"初始化README.md"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传服务端</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待传输完成  查看日志</span></span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></p><img src="/Git-CentOS-7搭建git服务端/1568795447.jpg"><h3 id="客户端使用ssh访问"><a href="#客户端使用ssh访问" class="headerlink" title="客户端使用ssh访问"></a>客户端使用ssh访问</h3><p>使用ssh访问稍稍麻烦一点，需要先生成ssh公钥。</p><h4 id="创建git使用者（已经创建的忽略这一步）"><a href="#创建git使用者（已经创建的忽略这一步）" class="headerlink" title="创建git使用者（已经创建的忽略这一步）"></a>创建git使用者（已经创建的忽略这一步）</h4><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "[用户名]"</span><br><span class="line">git config --global user.email "[邮箱]"</span><br><span class="line"></span><br><span class="line">git config --list --global</span><br></pre></td></tr></table></figure><p>可以看见已经设置的全局变量：</p><img src="/Git-CentOS-7搭建git服务端/1568796115.jpg"><h4 id="生成ssh公钥（已经生成的-忽略这一步）"><a href="#生成ssh公钥（已经生成的-忽略这一步）" class="headerlink" title="生成ssh公钥（已经生成的 忽略这一步）"></a>生成ssh公钥（已经生成的 忽略这一步）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;[邮箱]&quot;</span><br></pre></td></tr></table></figure><p>一直按回车 Enter，结束后，在提示的C盘的用户目录下。<br><img src="/Git-CentOS-7搭建git服务端/1568796388.jpg"><br>可以看见<strong>.ssh/id_rsa.pub</strong>为我们需要的公钥，<strong>id_rsa是密钥，不能告诉任何人哦</strong><br><img src="/Git-CentOS-7搭建git服务端/1568796473.jpg"></p><h4 id="服务端配置ssh访问"><a href="#服务端配置ssh访问" class="headerlink" title="服务端配置ssh访问"></a>服务端配置ssh访问</h4><p>默认<code>/etc/ssh/sshd_config</code>中的RSA认证是打开的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br></pre></td></tr></table></figure></p><p>默认的RSA认证文件为<code>.ssh/authorized_keys</code>，如在用户目录下不存在需要自己创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line"></span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">mkdir .ssh</span><br><span class="line"></span><br><span class="line">touch .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"># 默认的目录权限为drwxrwxr-x，文件的权限为-rw-rw-r-- ，安全起见可降低等级</span><br><span class="line">chmod 700 .ssh</span><br><span class="line">chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure></p><h4 id="公钥上传的服务端"><a href="#公钥上传的服务端" class="headerlink" title="公钥上传的服务端"></a>公钥上传的服务端</h4><p>可以手动打开客户端 <strong>.ssh/id_rsa.pub</strong> 复制到服务端 <strong>.ssh/authorized_keys</strong>中，<code>Esc :wq</code>保存退出。</p><p>也可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@[服务端地址] &apos;cat &gt;&gt; .ssh/authorized_keys&apos; &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><img src="/Git-CentOS-7搭建git服务端/1568798235.jpg"><p>至此我们就可以愉快的使用ssh访问啦，不需要密码验证。clone时也不需要，如下图，上面的为已配置ssh的，下面的为取消配置的</p><img src="/Git-CentOS-7搭建git服务端/1568798416.jpg"><h4 id="禁止用户git通过shell登录"><a href="#禁止用户git通过shell登录" class="headerlink" title="禁止用户git通过shell登录"></a>禁止用户git通过shell登录</h4><p>因为前面配置ssh访问，所以当前的git账户是可以通过ssh访问服务器的。<br><img src="/Git-CentOS-7搭建git服务端/1568798995.jpg"><br>为了安全起见，禁止客户端通过shell远程登录服务器。切换用户git，在根目录下创建git-shell-commands</p><img src="/Git-CentOS-7搭建git服务端/1565089159.jpg"><p>注意：该目录为git shell需要的，不然会报</p><blockquote><p>fatal: Interactive git shell is not enabled.<br>hint: ~/git-shell-commands should exist and have read and execute access.</p></blockquote><p>修改/etc/passwd文件<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 切换root</span><br><span class="line">su root</span><br><span class="line"></span><br><span class="line"># 编辑文件</span><br><span class="line">vi /etc/passwd</span><br><span class="line"></span><br><span class="line">i</span><br><span class="line"></span><br><span class="line"># 找到git开始的</span><br><span class="line"><span class="function">git:<span class="title">x</span>:1000:1000::/<span class="title">home</span>/<span class="title">git</span>:/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="function"># 更改为 </span></span><br><span class="line"><span class="function"><span class="title">git:x</span>:1000:1000::/<span class="title">home</span>/<span class="title">git</span>:/<span class="title">bin</span>/<span class="title">git</span>-<span class="title">shell</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Esc</span> :<span class="title">wq</span></span></span><br></pre></td></tr></table></figure></p><p>此时我们就不用担心客户端通过shell登录，只允许使用git-shell进行管理git的仓库。</p><p><strong>注意</strong>：这种方式适用于开发者较少的情况，每次增加或删除用户时都必须登录到服务器上去，而且还缺少必要的权限管理，因为用户对所有在/home/git下的git项目都拥有读写权限。当团队成员人数达到成百上千时可以使用gitosis或者gitolite管理，好像还有自动权限管理的功能~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大多数情况下我们使用github托管，特别是私库免费以后，但是github被黑也会有宕机的时候，那怎么办呀，就是喜欢用git呀，特别是微信小程序的官方编辑器用svn时代码颜色不更改呀（不知道版本更新后是否支持），都不知道改了哪行~😧这个时候我们可以考虑在私有服务器搭建git服务端。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;目前通过&lt;code&gt;yum -y install git&lt;/code&gt;安装的git版本为 1.8.3.1。&lt;/p&gt;
&lt;img src=&quot;/Git-CentOS-7搭建git服务端/1565083693.jpg&quot;&gt;
&lt;p&gt;但是&lt;a href=&quot;https://mirrors.edge.kernel.org/pub/software/scm/git/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方git仓库&lt;/a&gt;的最新版目前是2.9.5&lt;/p&gt;
&lt;img src=&quot;/Git-CentOS-7搭建git服务端/1565083864.jpg&quot;&gt;
    
    </summary>
    
    
      <category term="CentOS7" scheme="https://sunflowercoder.com/tags/CentOS7/"/>
    
      <category term="Git" scheme="https://sunflowercoder.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>yum 查看安装的包 包含了哪些文件</title>
    <link href="https://sunflowercoder.com/yum-%E6%9F%A5%E7%9C%8Binstall%E5%8C%85%E8%A3%85%E4%BA%86%E5%93%AA%E4%BA%9B%E6%96%87%E4%BB%B6/"/>
    <id>https://sunflowercoder.com/yum-查看install包装了哪些文件/</id>
    <published>2019-08-06T03:51:01.000Z</published>
    <updated>2019-08-06T08:27:15.655Z</updated>
    
    <content type="html"><![CDATA[<p>centos7 rpm的包可以通过<code>rpm -qlp [包的路径]</code>查看</p><img src="/yum-查看install包装了哪些文件/1565073254.jpg"><p>但是通过yum 安装的包怎么看安装了哪些文件😧？</p><p>yum命令是基于rpm的软件包管理器，能够从指定的服务器自动下载rpm包并且安装，可以自动处理依赖性关系，并且安装所有依赖的软体包。</p><p><strong>用法：yum (选项) (命令) (参数)</strong></p><a id="more"></a><p><strong>常用的选项</strong>：</p><ul><li><code>-h, --help</code>：显示帮助信息。</li><li><code>-C, --cacheonly</code>：完全从系统缓存中运行，不下载。</li><li><code>-c [config file], --config=[config file]</code>：指定配置文件位置。</li><li><code>-R [minutes], --randomwait=[minutes]</code>：设置yum处理一个命令的最大等待时间（分钟）。</li><li><code>-d [debug level], --debuglevel=[debug level]</code>：设置调试日志输出等级（0-10）。</li><li><code>-e [error level], --errorlevel=[error level]</code>：设置错误日志输出等级（0-10）。</li><li><code>-q, --quiet</code>：安静模式。</li><li><code>-v, --verbose</code>：详细模式。</li><li><code>-y, --assumeyes</code>：对所有的提问都回答”yes”。</li><li><code>--version</code>：显示yum的版本。</li><li><code>--installroot=[path]</code>：设置安装的根路径。</li><li><code>-x [package], --exclude=[package]</code>：通过名字或者glob风格的通配符排除一个或多个包。</li><li><code>--downloadonly</code>: 只下载不更新安装包。</li></ul><p><strong>常用的yum命令</strong>：</p><ul><li><code>install &lt;package_name..&gt;</code>：安装指定的rpm包（多个用空格隔开）及依赖，不指定包名安装所有包！</li><li><code>update &lt;package_name..&gt;</code>：更新指定rpm包（多个用空格隔开），不指定包名更新所有能更新的包！</li><li><code>check-update</code>：检查所有能更新的rpm包清单。</li><li><code>remove/erase &lt;package_name..&gt;</code>：删除指定的rpm软件包<strong>及相关依赖</strong>。<strong><em>特别注意：yum remove会删除所有依赖的包，谨慎使用！ 建议通过rpm -e来处理依赖删除。</em></strong></li><li><code>list</code>：列出所有可安裝的rpm包清单。</li><li><code>search [str]</code>：查询包含指定串的包及介绍清单。</li><li><code>info &lt;package_name..&gt;</code>：显示指定的rpm软件包的描述信息和概要信息；</li><li><code>clean &lt;packages/headers/oldheaders&gt;</code>：清理过期的缓存，</li><li><code>shell</code>：进入yum的shell提示符；</li><li><code>localinstall &lt;package_name..&gt;</code>：安装本地的rpm包；</li><li><code>localupdate &lt;package_name..&gt;</code>：显示本地rpm包进行更新；</li><li><code>deplist &lt;package_name..&gt;</code>：显示rpm包的所有依赖关系。</li></ul><p>综上，并没有涉及相关rpm包具体安装了哪些文件，<code>yum info &lt;package_name..&gt;</code>只是展示一些概要信息，</p><img src="/yum-查看install包装了哪些文件/1565078428.jpg"><p>难道不能看到安装了哪些包吗？当然可以，需要安装<code>yum-utils</code>包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install yum-utils</span><br></pre></td></tr></table></figure></p><p>通过 <code>repoquery -ql &lt;package_name&gt;</code>查看</p><img src="/yum-查看install包装了哪些文件/1565078664.jpg"><p>如上可以看见php70w-7.0.33-1.w7.x86_64这个包包含了/usr/lib64/httpd/modules/libphp7-zts.so、/usr/lib64/httpd/modules/libphp7.so等，安装php不成功的很多都是缺少这个诶~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;centos7 rpm的包可以通过&lt;code&gt;rpm -qlp [包的路径]&lt;/code&gt;查看&lt;/p&gt;
&lt;img src=&quot;/yum-查看install包装了哪些文件/1565073254.jpg&quot;&gt;
&lt;p&gt;但是通过yum 安装的包怎么看安装了哪些文件😧？&lt;/p&gt;
&lt;p&gt;yum命令是基于rpm的软件包管理器，能够从指定的服务器自动下载rpm包并且安装，可以自动处理依赖性关系，并且安装所有依赖的软体包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用法：yum (选项) (命令) (参数)&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CentOS7" scheme="https://sunflowercoder.com/tags/CentOS7/"/>
    
      <category term="yum" scheme="https://sunflowercoder.com/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>Centos7防火墙设置</title>
    <link href="https://sunflowercoder.com/Centos7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/"/>
    <id>https://sunflowercoder.com/Centos7防火墙设置/</id>
    <published>2019-08-05T07:47:56.000Z</published>
    <updated>2019-08-06T08:27:15.728Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS 7中使用的防火墙为firewall，在CentOS 6.5中在iptables防火墙中进行了升级了。 </p><ul><li>用于实现持久的网络流量规则。</li><li>可以动态修改单条规则，动态管理规则集，允许更新规则而不破坏现有会话和连接</li><li>使用区域(zone)和服务(service)</li><li>默认是拒绝的，需要设置以后才能放行</li></ul><a id="more"></a><blockquote><p>CentOS 7放行端口需要在云服务器管理后台和服务器firewall同时设置才有效！注意默认全部拒绝！管理后台通过权限组添加规则。</p></blockquote><h2 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h2><p><code>/usr/lib/firewalld/services</code> 目录中存放定义好的网络服务和端口参数，系统参数。配置时引用服务名称</p><img src="/Centos7防火墙设置/1564993293.jpg"><p><code>/etc/firewalld/</code>为配置目录，使用区域在zones下</p><img src="/Centos7防火墙设置/1564993463.jpg"><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>firewall-cmd：是Linux提供的操作firewall的一个工具。</p><p>（1）firewalld服务启动、关闭、重启，设置开机自启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">systemctl start firewalld  </span><br><span class="line"></span><br><span class="line"># 关闭</span><br><span class="line">systemctl stop firewalld  </span><br><span class="line">  </span><br><span class="line"># 重启</span><br><span class="line">systemctl restart firewalld    </span><br><span class="line"></span><br><span class="line"># 开机启动       </span><br><span class="line">systemctl enable firewalld  </span><br><span class="line">      </span><br><span class="line"># 取消开机启动</span><br><span class="line">systemctl disable firewalld </span><br><span class="line">      </span><br><span class="line"># 查看是否开机自启</span><br><span class="line">systemctl is-enabled firewalld</span><br></pre></td></tr></table></figure></p><p>（2）添加端口/服务。用户可以通过修改配置文件的方式添加端口，也可以通过命令的方式添加端口，注意，修改的内容会在<code>/etc/firewalld/</code> 目录下的配置文件中还体现。例如在<code>public</code>区域添加tcp端口8020<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --permanent --add-port=8010/tcp</span><br></pre></td></tr></table></figure></p><ul><li>–permanent：表示设置为持久；</li><li>–add-port：标识添加的端口；</li></ul><p>可以在<code>/etc/firewalld/zones/public.xml</code>中看见已经添加成功。</p><img src="/Centos7防火墙设置/1564993818.jpg"><p>这个配置文件也可以手动修改，如添加服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/firewalld/zones/public.xml</span><br><span class="line">i</span><br><span class="line">加入 &lt;service name=&quot;mysql&quot;/&gt;</span><br></pre></td></tr></table></figure></p><img src="/Centos7防火墙设置/1564994075.jpg"><p>也可以通过<code>--add-service</code>添加，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=mysql</span><br></pre></td></tr></table></figure></p><p><strong>重载可生效</strong><code>firewall-cmd --reload</code>。</p><p>（3）查看规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure></p><img src="/Centos7防火墙设置/1564994718.jpg"><p>（4）其它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 查看防火墙状态</span><br><span class="line">firewall-cmd --state </span><br><span class="line"></span><br><span class="line"># 查看默认的域</span><br><span class="line">firewall-cmd --get-default-zone</span><br><span class="line"></span><br><span class="line"># 查看所有的域</span><br><span class="line">firewall-cmd --get-zones</span><br><span class="line"></span><br><span class="line"># 查看所有域的信息</span><br><span class="line">firewall-cmd --list-all-zones</span><br><span class="line"></span><br><span class="line"># 查看指定域的信息</span><br><span class="line">firewall-cmd --zone=public --list-all</span><br><span class="line"></span><br><span class="line"># 查看可以添加的服务</span><br><span class="line">firewall-cmd --get-services</span><br><span class="line"></span><br><span class="line"># 设置指定域为默认域</span><br><span class="line">firewall-cmd --set-default-zone=public</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS 7中使用的防火墙为firewall，在CentOS 6.5中在iptables防火墙中进行了升级了。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于实现持久的网络流量规则。&lt;/li&gt;
&lt;li&gt;可以动态修改单条规则，动态管理规则集，允许更新规则而不破坏现有会话和连接&lt;/li&gt;
&lt;li&gt;使用区域(zone)和服务(service)&lt;/li&gt;
&lt;li&gt;默认是拒绝的，需要设置以后才能放行&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CentOS7" scheme="https://sunflowercoder.com/tags/CentOS7/"/>
    
      <category term="firewall" scheme="https://sunflowercoder.com/tags/firewall/"/>
    
  </entry>
  
  <entry>
    <title>Centos 7利用yum安装apache+mysql 8+php7 一篇搞定！</title>
    <link href="https://sunflowercoder.com/Centos-7%E5%88%A9%E7%94%A8yum%E5%AE%89%E8%A3%85apache-mysql-8-php7/"/>
    <id>https://sunflowercoder.com/Centos-7利用yum安装apache-mysql-8-php7/</id>
    <published>2019-08-04T15:32:45.000Z</published>
    <updated>2019-08-07T03:38:37.724Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要为大家详细介绍了centos7利用yum配置php环境的详细步骤，带你过坑~<br>安装的mysql版本为Ver 8.0.17 for Linux on x86_64 (MySQL Community Server - GPL)<br>安装的php版本为PHP 7.0.33</p></blockquote><p><span id="inline-green">为了方便大家复制code，本篇文章关闭复制自动追加版权。</span><br><a id="more"></a></p><h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><h3 id="1-清理原来的mysql文件"><a href="#1-清理原来的mysql文件" class="headerlink" title="1. 清理原来的mysql文件"></a>1. 清理原来的mysql文件</h3><p>(1)查看是否有已安装的mysql版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure></p><blockquote><p>可能的显示：<br>mysql-community-libs-8.0.12-1.el7.x86_64<br>mysql80-community-release-el7-1.noarch<br>mysql-community-client-8.0.12-1.el7.x86_64<br>mysql-community-common-8.0.12-1.el7.x86_64<br>mysql-community-server-8.0.12-1.el7.x86_64</p></blockquote><p>如果有的话，通过下面的命令进行删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove mysql-xxx-xxx-</span><br></pre></td></tr></table></figure></p><p>(2)查找mysql的相关文件（如有建议删除）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure></p><p>(3)根据自身的需求决定是否删除mysql的配置文件信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/mysql</span><br></pre></td></tr></table></figure></p><p>(4)查找并删除数据库mariadb<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure></p><blockquote><p>可能出现的结果mariadb-libs-5.5.56-2.el7.x86_64</p></blockquote><p>将查找出来的结果进行强制删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</span><br></pre></td></tr></table></figure></p><h3 id="2-下载安装mysql"><a href="#2-下载安装mysql" class="headerlink" title="2. 下载安装mysql"></a>2. 下载安装mysql</h3><p>(1)进入<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">mysql yum源</a>选择linux7跳转，</p><img src="/Centos-7利用yum安装apache-mysql-8-php7/1564933276.jpg"><p>不管login和sign up，右键点击下方的<strong>No thanks, just start my download.</strong>选择<strong>复制链接地址</strong></p><img src="/Centos-7利用yum安装apache-mysql-8-php7/1564933588.jpg"><p>选择下载存放的地址，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br></pre></td></tr></table></figure></p><p>(2)使用复制的链接地址yum源，如 <a href="https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm" target="_blank" rel="noopener">https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>(3)安装yum源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>(4)更新yum源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></p><p>(5)开始安装MySQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure></p><p>(6)启动MySQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure></p><h3 id="3-更改mysql默认的随机密码"><a href="#3-更改mysql默认的随机密码" class="headerlink" title="3. 更改mysql默认的随机密码"></a>3. 更改mysql默认的随机密码</h3><p>启动成功后可以查看初始化密码随机生成的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/mysqld.log | grep password</span><br></pre></td></tr></table></figure></p><p>登录MySQL，输入刚刚的随机密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure></p><p>更改密码，密码要求必须包含大小写字母数字及一个特殊字符！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;新密码&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="4-远程连接设置"><a href="#4-远程连接设置" class="headerlink" title="4. 远程连接设置"></a>4. 远程连接设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user set host=&apos;%&apos; where user=&apos;root&apos;;</span><br></pre></td></tr></table></figure><p>授权用户名的权限，赋予任何主机访问数据的权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; WITH GRANT OPTION;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p><p>注意：centos7需要在云服务器管理后台和服务器防火墙都要开启mysql服务端口，默认为3306，<a href="../../Centos7防火墙设置/">防火墙配置方式查看</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=mysql</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><p>可通过远程连接工具Navicat等连接尝试，如连接失败<code>2003... unknown error 1006</code>则为防火墙问题，其他问题可以尝试更改<code>/etc/my.cnf</code>再重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"># 表示允许任何主机登陆MySQL</span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure></p><h2 id="apache安装"><a href="#apache安装" class="headerlink" title="apache安装"></a>apache安装</h2><p>（1）安装之前先检查一下系统是否有默认安装的apache<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep httpd</span><br></pre></td></tr></table></figure></p><p>有的话，删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e * * * *(包名)</span><br></pre></td></tr></table></figure></p><p>（2）安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 更新</span><br><span class="line">yum update</span><br><span class="line"></span><br><span class="line"># 安装必备的包</span><br><span class="line">yum -y install gcc gcc-c++ make</span><br><span class="line"></span><br><span class="line"># 安装apache</span><br><span class="line">yum install httpd</span><br><span class="line"></span><br><span class="line"># apache 服务开启</span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line"># 设置apache开机启动</span><br><span class="line">systemctl enable httpd</span><br></pre></td></tr></table></figure></p><p>（3）配置防火墙，开启80端口。注意：centos7需要在云服务器管理后台和服务器防火墙都要开启http服务端口，默认为80，<a href="../../Centos7防火墙设置/">防火墙配置方式查看</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><p>（4）现在通过服务器ip:80端口访问，就可以看见默认的apache界面就算成功。</p><blockquote><p>如果不行，可尝试更改vi /etc/httpd/conf/httpd.conf 配置文件再重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerName localhost:80</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="php安装"><a href="#php安装" class="headerlink" title="php安装"></a>php安装</h2><p>（1）查看是否有以前的文件，yum默认安装的不是7.0，如果有尝试，需要完全删除以前的版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep php</span><br></pre></td></tr></table></figure></p><blockquote><p>可能有如下的包<br>php-pdo-5.1.6-27.el5_5.3<br>php-mysql-5.1.6-27.el5_5.3<br>php-xml-5.1.6-27.el5_5.3<br>php-cli-5.1.6-27.el5_5.3<br>php-common-5.1.6-27.el5_5.3<br>php-gd-5.1.6-27.el5_5.3</p></blockquote><p>如果有的话需要删除。注意包之间可能会有互相依赖，先删除无依赖的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e * * * *(包名)</span><br></pre></td></tr></table></figure></p><p>（2）安装。更改yum源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm </span><br><span class="line">yum -y install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64 php70w-pear.noarch php70w-process.x86_64 php70w-xml.x86_64 php70w-xmlrpc.x86_64</span><br></pre></td></tr></table></figure></p><p>php环境测试，在<code>/var/www/html</code>目录下，<code>vi index.php</code>输入如下内容保存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>重启httpd服务，<code>systemctl restart httpd</code>后查看ip:80/index.php，出现如下界面就算成功。<br><img src="/Centos-7利用yum安装apache-mysql-8-php7/1564997622.jpg"></p><p>如果原样输出，或者直接下载则失败，失败检查<br>可尝试更改/etc/httpd/conf/httpd.conf重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mime_module&gt;</span><br><span class="line">....</span><br><span class="line">AddType application/x-compress .Z</span><br><span class="line">AddType application/x-gzip .gz .tgz</span><br><span class="line">下添加</span><br><span class="line">AddType application/x-httpd-php .php</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇文章主要为大家详细介绍了centos7利用yum配置php环境的详细步骤，带你过坑~&lt;br&gt;安装的mysql版本为Ver 8.0.17 for Linux on x86_64 (MySQL Community Server - GPL)&lt;br&gt;安装的php版本为PHP 7.0.33&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span id=&quot;inline-green&quot;&gt;为了方便大家复制code，本篇文章关闭复制自动追加版权。&lt;/span&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="CentOS7" scheme="https://sunflowercoder.com/tags/CentOS7/"/>
    
      <category term="apache" scheme="https://sunflowercoder.com/tags/apache/"/>
    
      <category term="mysql" scheme="https://sunflowercoder.com/tags/mysql/"/>
    
      <category term="php" scheme="https://sunflowercoder.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>国外VPS云服务器购买及ssr搭建</title>
    <link href="https://sunflowercoder.com/%E5%9B%BD%E5%A4%96VPS%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%8F%8Assr%E6%90%AD%E5%BB%BA/"/>
    <id>https://sunflowercoder.com/国外VPS云服务器购买及ssr搭建/</id>
    <published>2019-08-04T01:35:36.000Z</published>
    <updated>2019-08-29T03:26:39.395Z</updated>
    
    <content type="html"><![CDATA[<p>是否需要买一个云主机？VPS云？当前常见的云主机管理平台包括Eucalyptus云主机，CloudStack云主机，OpenStack云主机 , OpenNebula云主机，onapp云主机等。国外的服务器有什么好处？简单来说不需要备案，搭个ssr免了买vpn的钱。</p><h2 id="国外VPS选购"><a href="#国外VPS选购" class="headerlink" title="国外VPS选购"></a>国外VPS选购</h2><p>SSR的速度完全取决于你VPS速度的快慢，国外VPS商家众多，本篇文章主要推荐vultr和搬瓦工这两家。</p><p><strong>1.vultr</strong></p><p>目前在全球有16个机房（包括日本、新加坡、美国等），基于KVM虚拟，纯SSD硬盘，后台允许购买Windows系统的VPS，支持Alipay（支付宝等）、PayPal等。官方网站：<a href="http://www.vultr.com" target="_blank" rel="noopener">www.vultr.com</a><br>点击<a href="https://www.vultr.com/?ref=8216634-4F" target="_blank" rel="noopener">Vultr注册充值送50美金点击进入</a>，注册完成点击<strong>Products</strong>，选择deploy new server选择合适的机器。<br><a id="more"></a><br><img src="/国外VPS云服务器购买及ssr搭建/1564885265.jpg"><br>充值选择<strong>Billing</strong>，从链接进入会看见充值送50美刀<br><img src="/国外VPS云服务器购买及ssr搭建/c67c054eecd4e1d6ad03206a6200006.png"></p><p><strong>2.搬瓦工</strong></p><p>KVM虚拟，支持Centos, Debian, Ubuntu，SSD硬盘，每个VPS自带一个独立IPv4，可选机房有四个。</p><p>点击<a href="https://bandwagonhost.com/aff.php?aff=51191" target="_blank" rel="noopener">注册搬瓦工</a>，注册成功后点击<a href="https://bwh88.net/vps-hosting.php" target="_blank" rel="noopener">VPS Hosting</a>选择。</p><h2 id="服务器连接"><a href="#服务器连接" class="headerlink" title="服务器连接"></a>服务器连接</h2><p>以vultr为例，选购完成后在<strong>Products</strong>能看见等待设备安装，点击进入设备<br><img src="/国外VPS云服务器购买及ssr搭建/1564892935.jpg"><br>可以看见ip，username和password，默认的防火墙是打开ssh 22端口的，我们可以通过远程登录管理，小编使用的xshell，普通的xshell是试用期30天，小编这里收集了一个Free for home/school版本的，如果链接失效可以联系我</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1ARlnKwUBWz9wQocCzmEU1Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1ARlnKwUBWz9wQocCzmEU1Q</a><br>提取码：50qf<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><p>安装完后选择<strong>文件-&gt;新建</strong>，设置<strong>主机名</strong>，即为vultr后台的ip address。<br><img src="/国外VPS云服务器购买及ssr搭建/1564893531.jpg"><br>点击<strong>用户身份验证</strong>，填写用户名为vultr的username，密码为vultr的password，点击<strong>确定</strong>。<br><img src="/国外VPS云服务器购买及ssr搭建/1564893834.jpg"><br>会话创建完成，双击就可以连接，提示密码保存的窗口就点击同意，不然下次还得输入密码。</p><h2 id="SSR搭建"><a href="#SSR搭建" class="headerlink" title="SSR搭建"></a>SSR搭建</h2><p>连接后，在想要放置的位置开始搭建ssr。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ yum install wget -y</span><br><span class="line"></span><br><span class="line">$ wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span><br><span class="line"></span><br><span class="line">$ chmod +x shadowsocksR.sh</span><br><span class="line"></span><br><span class="line">$ ./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br></pre></td></tr></table></figure></p><p>运行后，会提示你设置端口（port）和密码（password），加密方式,协议,混淆等</p><p>（1）设置SSR连接密码：Please enter password for ShadowsocksR。（如不设定，默认为 teddysun.com）<br><img src="/国外VPS云服务器购买及ssr搭建/20181231160302.png"><br>（2）设置你的服务器端口[1-65535]：Please enter a port for ShadowsocksR 。（如不设定就是提示的）<br><img src="/国外VPS云服务器购买及ssr搭建/20181231160423.png"><br>（3）设置加密方式：Please select stream cipher for ShadowsocksR，输入序号回车选择：<br><img src="/国外VPS云服务器购买及ssr搭建/20181231155203.png"><br>（4）选择协议：Please select protocol for ShadowsocksR，输入序号回车选择：（如不设定，默认为 origin）<br><img src="/国外VPS云服务器购买及ssr搭建/20181231155214.png"><br>（5）选择混淆方式：Please select obfs for ShadowsocksR，输入序号回车选择(免流请选择2:http_simple),（如不设定，默认为 plain）<br><img src="/国外VPS云服务器购买及ssr搭建/20181231155226.png"><br>设置完成回车，等待几分钟完成，<br><img src="/国外VPS云服务器购买及ssr搭建/1564895298.jpg"></p><p>还需要在服务器及vultr后台开放端口！如 端口为8502<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在public.xml添加端口</span><br><span class="line">firewall-cmd --zone=public --permanent --add-port=8502/tcp </span><br><span class="line">firewall-cmd --zone=public --permanent --add-port=8502/udp </span><br><span class="line"></span><br><span class="line"># 重启防火墙生效</span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure></p><p>vultr后台配置防火墙端口<strong>Products-&gt;firewall</strong>。<br><img src="/国外VPS云服务器购买及ssr搭建/1564899008.jpg"><br>没有权限组的就创建一个，<br><img src="/国外VPS云服务器购买及ssr搭建/1564899136.jpg"><br>有的话进入点击编辑Edit firewall，选择TCP，填写刚刚设置ssr的端口，点击加号添加<br><img src="/国外VPS云服务器购买及ssr搭建/1564899249.jpg"><br>提示大约120S内生效。</p><p>SSR各系统连接工具下载请看<a href="https://github.com/shadowsocksrr，选择合适的系统点击release选择版本下载。" target="_blank" rel="noopener">https://github.com/shadowsocksrr，选择合适的系统点击release选择版本下载。</a></p><h2 id="ssr多端口配置"><a href="#ssr多端口配置" class="headerlink" title="ssr多端口配置"></a>ssr多端口配置</h2><p>脚本默认创建单用户配置文件，如需配置多用户，需更改配置文件。</p><p>ssr服务启动/停止/重启/状态：/etc/init.d/shadowsocks start/stop/restart/status</p><p>编辑配置文件：vi /etc/shadowsocks.json 按i进行编辑<br><img src="/国外VPS云服务器购买及ssr搭建/af8d07d90911918ce5f82600b833ac0.png"><br>将原来的<code>server_port</code>和<code>password</code>改为<code>port_password</code>对应的多个以port为键，password为值形式的<br><img src="/国外VPS云服务器购买及ssr搭建/1c7689e846daa4f8e3dc57130906fca.png"><br>Esc :wq保存退出。重启shadowsocks服务。</p><p>注意：新增加的端口号port仍然需要在防火墙配置入站端口规则。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是否需要买一个云主机？VPS云？当前常见的云主机管理平台包括Eucalyptus云主机，CloudStack云主机，OpenStack云主机 , OpenNebula云主机，onapp云主机等。国外的服务器有什么好处？简单来说不需要备案，搭个ssr免了买vpn的钱。&lt;/p&gt;
&lt;h2 id=&quot;国外VPS选购&quot;&gt;&lt;a href=&quot;#国外VPS选购&quot; class=&quot;headerlink&quot; title=&quot;国外VPS选购&quot;&gt;&lt;/a&gt;国外VPS选购&lt;/h2&gt;&lt;p&gt;SSR的速度完全取决于你VPS速度的快慢，国外VPS商家众多，本篇文章主要推荐vultr和搬瓦工这两家。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.vultr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前在全球有16个机房（包括日本、新加坡、美国等），基于KVM虚拟，纯SSD硬盘，后台允许购买Windows系统的VPS，支持Alipay（支付宝等）、PayPal等。官方网站：&lt;a href=&quot;http://www.vultr.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.vultr.com&lt;/a&gt;&lt;br&gt;点击&lt;a href=&quot;https://www.vultr.com/?ref=8216634-4F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vultr注册充值送50美金点击进入&lt;/a&gt;，注册完成点击&lt;strong&gt;Products&lt;/strong&gt;，选择deploy new server选择合适的机器。&lt;br&gt;
    
    </summary>
    
    
      <category term="VPS" scheme="https://sunflowercoder.com/tags/VPS/"/>
    
      <category term="ssr" scheme="https://sunflowercoder.com/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>Google Play应用上架流程</title>
    <link href="https://sunflowercoder.com/Google-Play%E5%BA%94%E7%94%A8%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B/"/>
    <id>https://sunflowercoder.com/Google-Play应用上架流程/</id>
    <published>2019-08-02T07:38:31.000Z</published>
    <updated>2019-08-07T03:25:11.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>泥萌爱玩小游戏的小编喜欢玩2048，迫于市面上的小游戏广告太多了😳，机智的小编就用cocos creator写了个小游戏，想要发布到线上给大家一起玩呀😁，开始放到github page，地址为<a href="https://sunflowercoder.com/2048/">https://sunflowercoder.com/2048/</a> （移动端打开），但是网不好可咋整啊~ 机智的小编打包成apk了，因为小编不想要倒腾买软著，又费时间的又费钱😂，小编就想到发布到google play啦</p><p>Cocos Creator打包到原生平台需要先配置原生开发环境，安装jdk，下载Android Studio并且下载需要的sdk和ndk，具体查看官方文档：<a href="https://docs.cocos.com/creator/manual/zh/publish/setup-native-development.html" target="_blank" rel="noopener">https://docs.cocos.com/creator/manual/zh/publish/setup-native-development.html</a> 。打包发布原生平台查看官方文档：<a href="https://docs.cocos.com/creator/manual/zh/publish/publish-native.html" target="_blank" rel="noopener">https://docs.cocos.com/creator/manual/zh/publish/publish-native.html</a> </p><blockquote><p>前提：科学上网；一张Visa/Master卡，开通账号需要支付25美刀。</p></blockquote><p>2048 Google play地址为：<a href="https://play.google.com/store/apps/details?id=com.aililuo.simple2048" target="_blank" rel="noopener">https://play.google.com/store/apps/details?id=com.aililuo.simple2048</a></p><a id="more"></a><h2 id="获取一个开发者账号"><a href="#获取一个开发者账号" class="headerlink" title="获取一个开发者账号"></a>获取一个开发者账号</h2><img src="/Google-Play应用上架流程/1564737658.jpg"><p><strong>1. 注册google账号（如已经有了可跳过这步直接登录）</strong>：<a href="https://accounts.google.com/SignUp" target="_blank" rel="noopener">https://accounts.google.com/SignUp</a><br><img src="/Google-Play应用上架流程/1564736601.jpg" title="注册页.jpg"><br>推荐使用gmail，如果想用自己的邮箱点击-&gt;<strong>改用我的当前电子邮件地址</strong>。<br>填写完成之后点击下一步，同意协议，验证手机号、邮箱之后，可以登录啦~账号首页地址为<a href="https://myaccount.google.com/" target="_blank" rel="noopener">https://myaccount.google.com/</a></p><p><strong>2.开通开发者权限</strong>：<a href="https://play.google.com/apps/publish/signup/" target="_blank" rel="noopener">https://play.google.com/apps/publish/signup/</a><br><img src="/Google-Play应用上架流程/1564737186.jpg"><br><strong>勾选</strong>同意协议，点击<strong>继续付款</strong><br><img src="/Google-Play应用上架流程/1564737418.jpg"><br>绑定信用卡，支付25$就可以了。<strong>注意：可能会多扣了1$，稍等会返还的。</strong></p><p>支付完成，填写账号的详细信息，点击<strong>完成注册</strong>就可以愉快的上传应用啦。</p><h2 id="应用创建"><a href="#应用创建" class="headerlink" title="应用创建"></a>应用创建</h2><p>前面的都完成了，访问<a href="https://play.google.com/apps/publish/" target="_blank" rel="noopener">https://play.google.com/apps/publish/</a> ，应该能看见如下的界面，点击<strong>创建应用</strong><br><img src="/Google-Play应用上架流程/1564738170.jpg"><br>选择app的<strong>默认语言</strong>，填写app名称，点击<strong>创建</strong>即可进入详情页<br><img src="/Google-Play应用上架流程/1564738392.jpg"><br>详情页可以看见左侧一些带灰色勾勾的项，没错，就是全部点亮✅就可以发布了<br><img src="/Google-Play应用上架流程/1564739032.jpg"></p><p>默认一创建应用是跳转的商品详情界面的，但是需要apk信息及内容分级，因各步骤互相关联，建议按下列的步骤来。</p><p><strong>1. 应用版本</strong></p><p>选择合适的版本，比如当前我们要发布当然要选正式渠道，点击后面的<strong>管理</strong>-&gt;<strong>创建版本</strong>。<br><img src="/Google-Play应用上架流程/1564739753.jpg"><br>选择合适的方式管理应用签名密钥，因为当前发布的小游戏没有什么三方，小编就直接选择推荐的Google管理了，点击<strong>继续</strong>，如果需要保持原来的签名选择<strong>停用</strong>。<br><img src="/Google-Play应用上架流程/1564741856.jpg"><br>上传apk/app bundle，填写版本名称，版本的新功能，点击<strong>保存</strong><br><img src="/Google-Play应用上架流程/1564742065.jpg"></p><p><strong>2. 内容分级</strong></p><p>填写电子邮箱，选择应用的类别<br><img src="/Google-Play应用上架流程/1564743989.jpg"><br>开始填写应用内有无暴力、令人恐惧的内容等，2048选否就对了<br><img src="/Google-Play应用上架流程/1564821698.jpg"><br>填写完成，点击<strong>保存调查问卷</strong>，再点击<strong>判断分级</strong>，<strong>确定分级</strong><br><img src="/Google-Play应用上架流程/1564821850.jpg"></p><p><strong>3. 商品详情</strong></p><p>需要填写app名称、简短的英文说明、详细的中文说明。<br><img src="/Google-Play应用上架流程/1564742240.jpg"><br>接下来就是图片资源  要求</p><ul><li>图标：<ul><li><strong>512x512 32位PNG 文件上限1024KB</strong></li><li>形状：<strong>完整正方形</strong> - Google Play 会动态处理遮盖部分。半径相当于图标大小的 20%，系统已禁止使用透明背景，</li><li>阴影：无 - Google Play 会动态处理阴影 <a href="https://developer.android.com/google-play/resources/icon-design-specifications" target="_blank" rel="noopener">查看设计规范详情</a><img src="/Google-Play应用上架流程/1564742977.jpg"></li></ul></li><li>屏幕截图 ：<strong>JPEG 或 24 位 PNG（无 alpha 透明层）。边长下限：320 像素；边长上限：3840 像素</strong>。总的来说，至少需要提供 <strong>2 张</strong>屏幕截图。每种类型最多可提供 8 张屏幕截图。</li><li>置顶大图：<strong>宽 1024 x 高 500 JPG 或 24 位 PNG（无 alpha 通道）格式</strong><img src="/Google-Play应用上架流程/1564743383.jpg">填写应用类型类别及电子邮件。<img src="/Google-Play应用上架流程/1564743724.jpg">填写<strong>隐私权政策</strong>，当您的应用内没有任何权限申请时，您可以勾选<strong>暂不提交隐私权政策网址</strong>，有权限申请时，必须要填写<img src="/Google-Play应用上架流程/1564824883.jpg">点击<strong>保存草稿</strong></li></ul><p><strong>4. 定价和分发范围</strong></p><p>选定应用是付费还是免费，上架2048当然是免费啦，选择可下载的地区（默认为所有地区都不可下载！）、是否包含广告，2048当然选择否啦<br><img src="/Google-Play应用上架流程/1564822452.jpg"><br>最后勾选<strong>内容准则 美国出口法律</strong>，点击<strong>保存草稿</strong><br><img src="/Google-Play应用上架流程/1564822611.jpg"></p><p><strong>5. 应用内容</strong></p><p>填写<strong>目标受众群体和内容</strong><br><img src="/Google-Play应用上架流程/1564822715.jpg"><br>进入下面步骤<br><img src="/Google-Play应用上架流程/1564822788.jpg"><br>选择目标年龄段，点击<strong>下一步</strong><br><img src="/Google-Play应用上架流程/1564822864.jpg"><br>选择是否会吸引儿童，点击<strong>下一步</strong><br><img src="/Google-Play应用上架流程/1564822950.jpg"><br>点击<strong>提交</strong><br><img src="/Google-Play应用上架流程/1564823070.jpg"></p><h2 id="应用发布"><a href="#应用发布" class="headerlink" title="应用发布"></a>应用发布</h2><p>当上面的都填完了，应用的状态会从“草稿”变成“可以发布”，可以在<a href="https://play.google.com/apps/publish/" target="_blank" rel="noopener">应用列表</a>看见，也能在详情右上方的tab看见。这时候进入<strong>应用版本-&gt;正式版渠道 修改版本-&gt;查看-&gt;开始发布正式版</strong></p><p>基本上第一次上架新的应用会比较慢审核，小编可是花了三天呢，2048 Google play地址为：<a href="https://play.google.com/store/apps/details?id=com.aililuo.simple2048" target="_blank" rel="noopener">https://play.google.com/store/apps/details?id=com.aililuo.simple2048</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="1-应用签名"><a href="#1-应用签名" class="headerlink" title="1. 应用签名"></a>1. 应用签名</h3><p>因为当前上架的2048并没有三方等，所以选的GooglePlay签名计划，上传的应用会被GooglePlay进行二次签名，这样导致的问题就是例如微信、百度定位等需要依赖签名的MD5值或者SHA1值的三方会出现校验失败。</p><p>如果需要保持原来的应用签名，在上架时选择<strong>停用</strong><br><img src="/Google-Play应用上架流程/1564828172.jpg"></p><h3 id="2-隐私权政策"><a href="#2-隐私权政策" class="headerlink" title="2. 隐私权政策"></a>2. 隐私权政策</h3><p>当前的2048不需要任何权限，但是一般上架的应用都会有权限的，就必须要填写隐私权政策，<br>关于使用特定权限的其他要求：</p><table><thead><tr><th>活动</th><th>要求</th></tr></thead><tbody><tr><td>您的应用清单请求“通话记录”权限组（例如 READ_CALL_LOG、WRITE_CALL_LOG、ROCESS_OUTGOING_CALLS）</td><td>必须由用户主动将应用注册为设备的默认电话或辅助处理程序。</td></tr><tr><td>您的应用清单请求“短信”权限组（例如 READ_SMS、SEND_SMS、WRITE_SMS、RECEIVE_SMS、RECEIVE_WAP_PUSH、RECEIVE_MMS）</td><td>必须由用户主动将应用注册为设备的默认短信或辅助处理程序。</td></tr></tbody></table><p>如果应用中使用了照相，通讯录，电话，短信，外部内存读写，位置等涉及用户隐私的权限，需要先生成隐私政策url，然后先将隐私权限嵌入到App中重写打包上传，还需要在Google play应用的<strong>商品详情-&gt;隐私权政策</strong>填写隐私权政策url。<br><img src="/Google-Play应用上架流程/1564826843.jpg"><br>上图为app内部界面，需要在注册部分或者直接弹窗提示用户授予。生成隐私权url方式：</p><ul><li><a href="https://www.iubenda.com/blog/privacy-policy-for-android-app/" target="_blank" rel="noopener">https://www.iubenda.com/blog/privacy-policy-for-android-app/</a> ：<a href="https://www.iubenda.com/en/help/3744-how-to-add-android-and-ios-mobile-permissions-for-device-data#android" target="_blank" rel="noopener">点击操作步骤查看</a></li><li><a href="https://www.privacypolicies.com/" target="_blank" rel="noopener">https://www.privacypolicies.com/</a> ：<a href="https://www.privacypolicies.com/free-privacy-policy-generator/" target="_blank" rel="noopener">点击创建</a></li><li>可以从网上搜一下app隐私声明模板，然后挂在官网上，这个链接也可以用来Google play审核</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;泥萌爱玩小游戏的小编喜欢玩2048，迫于市面上的小游戏广告太多了😳，机智的小编就用cocos creator写了个小游戏，想要发布到线上给大家一起玩呀😁，开始放到github page，地址为&lt;a href=&quot;https://sunflowercoder.com/2048/&quot;&gt;https://sunflowercoder.com/2048/&lt;/a&gt; （移动端打开），但是网不好可咋整啊~ 机智的小编打包成apk了，因为小编不想要倒腾买软著，又费时间的又费钱😂，小编就想到发布到google play啦&lt;/p&gt;
&lt;p&gt;Cocos Creator打包到原生平台需要先配置原生开发环境，安装jdk，下载Android Studio并且下载需要的sdk和ndk，具体查看官方文档：&lt;a href=&quot;https://docs.cocos.com/creator/manual/zh/publish/setup-native-development.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.cocos.com/creator/manual/zh/publish/setup-native-development.html&lt;/a&gt; 。打包发布原生平台查看官方文档：&lt;a href=&quot;https://docs.cocos.com/creator/manual/zh/publish/publish-native.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.cocos.com/creator/manual/zh/publish/publish-native.html&lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前提：科学上网；一张Visa/Master卡，开通账号需要支付25美刀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2048 Google play地址为：&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.aililuo.simple2048&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://play.google.com/store/apps/details?id=com.aililuo.simple2048&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>redis-migrate-tool使用详解</title>
    <link href="https://sunflowercoder.com/redis-migrate-tool%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>https://sunflowercoder.com/redis-migrate-tool使用详解/</id>
    <published>2019-08-01T08:51:07.000Z</published>
    <updated>2019-08-02T06:09:51.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>redis-migrate-tool 是维品会开源的一款redis数据迁移工具，基于redis复制，快速，稳定，github地址为：<a href="https://github.com/vipshop/redis-migrate-tool" target="_blank" rel="noopener">https://github.com/vipshop/redis-migrate-tool</a> 。</p><ul><li>快速。</li><li>多线程。</li><li>基于redis复制。</li><li>实时迁移。</li><li>迁移过程中，源集群不影响对外提供服务。</li><li>异构迁移。</li><li>支持Twemproxy集群，redis cluster集群，rdb文件 和 aof文件。</li><li>过滤功能。</li><li>当目标集群是Twemproxy，数据会跳过Twemproxy直接导入到后端的redis。</li><li>迁移状态显示。</li><li>完善的数据抽样校验(-C redis_check)。</li></ul><p>划重点 <strong>实时迁移</strong> <strong>迁移过程中，源集群不影响对外提供服务</strong></p><a id="more"></a><h2 id="安装redis-migrate-tool"><a href="#安装redis-migrate-tool" class="headerlink" title="安装redis-migrate-tool"></a>安装redis-migrate-tool</h2><p><strong>依赖</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install automake libtool autoconf bzip2 git</span><br></pre></td></tr></table></figure></p><p><strong>构建</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd redis-migrate-tool</span><br><span class="line">$ autoreconf -fvi</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ src/redis-migrate-tool -h</span><br></pre></td></tr></table></figure></p><p><strong>警告</strong></p><p>在运行工具之前，确保源redis所在的机器有足够的内存可以允许至少一个redis生成.rdb文件，如果源机器有大量足够的内存允许所有的redis生成.rdb，可以在配置文件rmt.conf设置<code>source_safe: false</code>。</p><p>下列命令不支持传播给target redis组，因为这些命令下的keys可能交叉了不同的目标redis节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME,RENAMENX,RPOPLPUSH,BRPOPLPUSH,FLUSHALL,FLUSHDB,BITOP,MOVE,GEORADIUS,GEORADIUSBYMEMBER,EVAL,EVALSHA,SCRIPT,PFMERGE</span><br></pre></td></tr></table></figure></p><h2 id="redis-migrate-tool-命令详解"><a href="#redis-migrate-tool-命令详解" class="headerlink" title="redis-migrate-tool 命令详解"></a>redis-migrate-tool 命令详解</h2><p>出现下列帮助说明表示安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">This is redis-migrate-tool-0.1.0</span><br><span class="line"></span><br><span class="line">Usage: redis-migrate-tool [-?hVdIn] [-v verbosity level] [-o output file]</span><br><span class="line">                  [-c conf file] [-C command]</span><br><span class="line">                  [-f source address] [-t target address]</span><br><span class="line">                  [-p pid file] [-m mbuf size] [-r target role]</span><br><span class="line">                  [-T thread number] [-b buffer size]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help             : this help</span><br><span class="line">  -V, --version          : show version and exit</span><br><span class="line">  -d, --daemonize        : run as a daemon</span><br><span class="line">  -I, --information      : print some useful information</span><br><span class="line">  -n, --noreply          : don&apos;t receive the target redis reply</span><br><span class="line">  -v, --verbosity=N      : set logging level (default: 5, min: 0, max: 11)</span><br><span class="line">  -o, --output=S         : set logging file (default: stderr)</span><br><span class="line">  -c, --conf-file=S      : set configuration file (default: rmt.conf)</span><br><span class="line">  -p, --pid-file=S       : set pid file (default: off)</span><br><span class="line">  -m, --mbuf-size=N      : set mbuf size (default: 512)</span><br><span class="line">  -C, --command=S        : set command to execute (default: redis_migrate)</span><br><span class="line">  -r, --source-role=S    : set the source role (default: single, you can input: single, twemproxy or redis_cluster)</span><br><span class="line">  -R, --target-role=S    : set the target role (default: single, you can input: single, twemproxy or redis_cluster)</span><br><span class="line">  -T, --thread=N         : set how many threads to run the job(default: 4)</span><br><span class="line">  -b, --buffer=S         : set buffer size to run the job (default: 140720309534720 byte, unit:G/M/K)</span><br><span class="line">  -f, --from=S           : set source redis address (default: 127.0.0.1:6379)</span><br><span class="line">  -t, --to=S             : set target redis group address (default: 127.0.0.1:6380)</span><br><span class="line">  -s, --step=N           : set step (default: 1)</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">    redis_migrate        : Migrate data from source group to target group.</span><br><span class="line">    redis_check          : Compare data between source group and target group. Default compare 1000 keys. You can set a key count behind.</span><br><span class="line">    redis_testinsert     : Just for test! Insert some string, list, set, zset and hash keys into the source redis group. Default 1000 keys. You can set key type and key count behind.</span><br></pre></td></tr></table></figure></p><p>部分指令解析：</p><ul><li><code>-h, --help</code>：帮助</li><li><code>-V, --version</code>：显示版本</li><li><code>-d, --daemonize</code>：后台进程运行</li><li><code>-I, --information</code>：打印一些有用的信息，包括可以解析的指令（126个），不支持的指令（14个）等等</li><li><code>-v, --verbosity=N</code>：设置日志等级。(默认: 5, 最低: 0, 最高: 11)</li><li><code>-o, --output=S</code>：设置输出的日志文件</li><li><code>-c, --conf-file=S</code>：设置配置文件。(默认: rmt.conf)</li><li><code>-C, --command=S</code>：设置运行的指令(默认: <code>redis_migrate</code> ，迁移)。<code>redis_check</code> 比较源和目的，默认1000个样本key。<code>redis_testinsert</code>测试插入Keys，默认所有类型总共1000个。</li><li><code>-T, --thread=N</code>：设置多少个线程用来运行工具。(默认: 4)</li></ul><h3 id="1-运行迁移"><a href="#1-运行迁移" class="headerlink" title="1. 运行迁移"></a>1. 运行迁移</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-migrate-tool -c rmt.conf -o log -d</span><br></pre></td></tr></table></figure><p>注意：-d指定为后台运行，如果再次运行可能需要杀死占用当前端口的进程。<code>netstat -tnulp</code>查看找到redis-migrate-tool的端口号，<code>kill -9 [端口号]</code>杀死再运行。</p><p>指定输出日志文件为log，可通过<code>tail -200 log</code>等查看日志。</p><h3 id="2-抽样检查"><a href="#2-抽样检查" class="headerlink" title="2. 抽样检查"></a>2. 抽样检查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-migrate-tool -c rmt.conf -o log -C redis_check</span><br><span class="line">Check job is running...</span><br><span class="line"></span><br><span class="line">Checked keys: 1000</span><br><span class="line">Inconsistent value keys: 0</span><br><span class="line">Inconsistent expire keys : 0</span><br><span class="line">Other check error keys: 0</span><br><span class="line">Checked OK keys: 1000</span><br><span class="line"></span><br><span class="line">All keys checked OK!</span><br><span class="line">Check job finished, used 1.041s</span><br></pre></td></tr></table></figure><p>抽样检查源组和目标组的数据，默认为1000个。如果需要检查更多的数据，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-migrate-tool -c rmt.conf -o log -C &quot;redis_check 200000&quot;</span><br><span class="line">Check job is running...</span><br><span class="line"></span><br><span class="line">Checked keys: 200000</span><br><span class="line">Inconsistent value keys: 0</span><br><span class="line">Inconsistent expire keys : 0</span><br><span class="line">Other check error keys: 0</span><br><span class="line">Checked OK keys: 200000</span><br><span class="line"></span><br><span class="line">All keys checked OK!</span><br><span class="line">Check job finished, used 11.962s</span><br></pre></td></tr></table></figure></p><h3 id="3-测试插入一些数据"><a href="#3-测试插入一些数据" class="headerlink" title="3. 测试插入一些数据"></a>3. 测试插入一些数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-migrate-tool -c rmt.conf -o log -C &quot;redis_testinsert&quot;</span><br><span class="line">Test insert job is running...</span><br><span class="line"></span><br><span class="line">Insert string keys: 200</span><br><span class="line">Insert list keys  : 200</span><br><span class="line">Insert set keys   : 200</span><br><span class="line">Insert zset keys  : 200</span><br><span class="line">Insert hash keys  : 200</span><br><span class="line">Insert total keys : 1000</span><br><span class="line"></span><br><span class="line">Correct inserted keys: 1000</span><br><span class="line">Test insert job finished, used 0.525s</span><br></pre></td></tr></table></figure><p>默认插入的数据为string、list、set、zset、hash各200个（均分），总共1000个。如果需要插入更多的键，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-migrate-tool -c rmt.conf -o log -C &quot;redis_testinsert 30000&quot;</span><br><span class="line">Test insert job is running...</span><br><span class="line"></span><br><span class="line">Insert string keys: 6000</span><br><span class="line">Insert list keys  : 6000</span><br><span class="line">Insert set keys   : 6000</span><br><span class="line">Insert zset keys  : 6000</span><br><span class="line">Insert hash keys  : 6000</span><br><span class="line">Insert total keys : 30000</span><br><span class="line"></span><br><span class="line">Correct inserted keys: 30000</span><br><span class="line">Test insert job finished, used 15.486s</span><br></pre></td></tr></table></figure></p><p>如果只想插入string类型的键（1000个），<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-migrate-tool -c rmt.conf -o log -C &quot;redis_testinsert string&quot;</span><br></pre></td></tr></table></figure></p><p>如果想指定插入的几种类型，并且指定总数，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$src/redis-migrate-tool -c rmt.conf -o log -C &quot;redis_testinsert string|set|list 10000&quot;</span><br><span class="line">Test insert job is running...</span><br><span class="line"></span><br><span class="line">Insert string keys: 3336</span><br><span class="line">Insert list keys  : 3336</span><br><span class="line">Insert set keys   : 3328</span><br><span class="line">Insert zset keys  : 0</span><br><span class="line">Insert hash keys  : 0</span><br><span class="line">Insert total keys : 10000</span><br><span class="line"></span><br><span class="line">Correct inserted keys: 10000</span><br><span class="line">Test insert job finished, used 5.539s</span><br></pre></td></tr></table></figure></p><p>插入校验生成的数据并不会清除，测试时可以尽量减少插入的key。</p><h2 id="rmt-conf配置文件"><a href="#rmt-conf配置文件" class="headerlink" title="rmt.conf配置文件"></a>rmt.conf配置文件</h2><p>配置文件包含三部分：[source], [target] 和 [common]</p><p>迁移工具的来源（source）可以是：单独的redis实例，twemproxy集群，redis cluster，rdb文件，aof文件。<br>迁移工具的目标（target）可以是：单独的redis实例，twemproxy集群，redis cluster，rdb文件。</p><p><strong>[source]/[target]</strong>：</p><ul><li><code>type</code>：<ul><li><strong>single</strong>：单独的redis实例</li><li><strong>twemproxy</strong>：twemproxy集群</li><li><strong>redis cluster</strong>：redis集群</li><li><strong>rdb file</strong>：.rdb文件</li><li><strong>aof file</strong>：.aof文件</li></ul></li><li><code>servers</code>：redis地址组，如果type:twemproxy，则为twemproxy配置文件，如果type:rdb file，则为rdb文件名。</li><li><code>redis_auth</code>：连接redis服务的认证auth。</li><li><code>timeout</code>：读写redis服务的超时时间(ms)，默认为120000ms</li><li><code>hash</code>：哈希方法名。仅当type:twemproxy有效。可以为one_at_a_time、md5、crc16、crc32、crc32a、fnv1_64、fnv1a_64、fnv1_32、fnv1a_32、hsieh、murmur、jenkins。</li><li><code>hash_tag</code>：用来哈希的关键key的两个字符，例如”{}” 或 “$$”。仅当type:twemproxy有效。只要标签内的关键key是相同的，能够将不同的键映射到同一服务器。</li><li><code>distribution</code>：键的分布模式。仅当type:twemproxy有效。可以为 ketama、modula、random。</li></ul><p><strong>[common]</strong>：</p><ul><li><code>listen</code>：监听的地址和端口。默认为127.0.0.1:8888</li><li><code>max_clients</code>：可监听端口的最大连接数。默认为100</li><li><code>threads</code>：工具可用的最多线程数。默认为cpu内核数。</li><li><code>step</code>：解析请求的步数。默认为1，数字越大，迁移越快，需要越多的内存。</li><li><code>mbuf_size</code>：请求的缓存大小（M），默认为512M</li><li><code>noreply</code>：是否检查目标组的回复，默认为false</li><li><code>source_safe</code>：是否保护源组机器的内存安全。默认为true，工具将允许在源组的同一台机器同时只有一个redis生成.rdb。</li><li><code>dir</code>：工作目录。用来存储文件，例如rdb文件，默认为当前目录。</li><li><code>filter</code>：过滤不符合表达式的Key，默认为NULL，支持通配符为glob-style风格<ul><li>? ：1个任意字符。例如 h?llo 匹配 hello, hallo , hxllo</li><li>* ：0个或多个任意字符。例如 h*llo 匹配 hllo ， heeeello</li><li>[characters]：匹配任意一个方括号内的字符，比如[abc]，要么匹配a，要么匹配b，要么匹配c。例如 h[ae]llo 匹配 hello ， hallo, 但不匹配 hillo。</li><li>[^character]：排除方括号内的字符。例如h[^e]llo 匹配 hallo, hbllo, … 但不匹配 hello。</li><li>[character-character]：表示2个字符范围内的都可以匹配，如[a-z]，[0-9]。例如h[a-b]llo 匹配 hallo 和 hbllo。</li><li><code>\</code>用来转移特殊字符。</li></ul></li></ul><p><strong>配置文件示例</strong>：<br>（1）从单一实例迁移数据到twemproxy集群（single to twemproxy）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[source]</span><br><span class="line">type: single</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:6379</span><br><span class="line"> - 127.0.0.1:6380</span><br><span class="line"> - 127.0.0.1:6381</span><br><span class="line"> - 127.0.0.1:6382</span><br><span class="line"></span><br><span class="line">[target]</span><br><span class="line">type: twemproxy</span><br><span class="line">hash: fnv1a_64</span><br><span class="line">hash_tag: &quot;&#123;&#125;&quot;</span><br><span class="line">distribution: ketama</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:6380:1 server1</span><br><span class="line"> - 127.0.0.1:6381:1 server2</span><br><span class="line"> - 127.0.0.1:6382:1 server3</span><br><span class="line"> - 127.0.0.1:6383:1 server4</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">listen: 0.0.0.0:8888</span><br><span class="line">threads: 2</span><br><span class="line">step: 1</span><br><span class="line">mbuf_size: 1024</span><br><span class="line">source_safe: true</span><br></pre></td></tr></table></figure></p><p>（2）从twemproxy集群迁移数据到redis集群（twemproxy to redis cluster）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[source]</span><br><span class="line">type: twemproxy</span><br><span class="line">hash: fnv1a_64</span><br><span class="line">hash_tag: &quot;&#123;&#125;&quot;</span><br><span class="line">distribution: ketama</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:6379</span><br><span class="line"> - 127.0.0.1:6380</span><br><span class="line"> - 127.0.0.1:6381</span><br><span class="line"> - 127.0.0.1:6382</span><br><span class="line"></span><br><span class="line">[target]</span><br><span class="line">type: redis cluster</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:7379</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">listen: 0.0.0.0:8888</span><br><span class="line">step: 1</span><br><span class="line">mbuf_size: 512</span><br></pre></td></tr></table></figure></p><p>（3）从一个redis集群迁移数据到另一个集群（redis cluster to another redis cluster），配置filter为以”abc”开始的键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[source]</span><br><span class="line">type: redis cluster</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:8379</span><br><span class="line"></span><br><span class="line">[target]</span><br><span class="line">type: redis cluster</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:7379</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">listen: 0.0.0.0:8888</span><br><span class="line">filter: abc*</span><br></pre></td></tr></table></figure></p><p>（4）从.rdb文件导入数据到redis集群（rdb file to redis cluster）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[source]</span><br><span class="line">type: rdb file</span><br><span class="line">servers:</span><br><span class="line"> - /data/redis/dump1.rdb</span><br><span class="line"> - /data/redis/dump2.rdb</span><br><span class="line"></span><br><span class="line">[target]</span><br><span class="line">type: redis cluster</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:7379</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">listen: 0.0.0.0:8888</span><br><span class="line">step: 2</span><br><span class="line">mbuf_size: 512</span><br><span class="line">source_safe: false</span><br></pre></td></tr></table></figure></p><p>（5）保存redis集群的数据到.rdb（redis cluster to rdb file）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[source]</span><br><span class="line">type: redis cluster</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:7379</span><br><span class="line"></span><br><span class="line">[target]</span><br><span class="line">type: rdb file</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">listen: 0.0.0.0:8888</span><br><span class="line">source_safe: true</span><br></pre></td></tr></table></figure></p><p>（6）从.aof文件导入数据到redis集群（aof file to redis cluster）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[source]</span><br><span class="line">type: aof file</span><br><span class="line">servers:</span><br><span class="line"> - /data/redis/appendonly1.aof</span><br><span class="line"> - /data/redis/appendonly2.aof</span><br><span class="line"></span><br><span class="line">[target]</span><br><span class="line">type: redis cluster</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:7379</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">listen: 0.0.0.0:8888</span><br><span class="line">step: 2</span><br></pre></td></tr></table></figure></p><p>（7）从redis集群迁移数据到单一实例（redis cluster to single）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[source]</span><br><span class="line">type: redis cluster</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:8379</span><br><span class="line"></span><br><span class="line">[target]</span><br><span class="line">type: single</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">listen: 0.0.0.0:8888</span><br></pre></td></tr></table></figure></p><p>（8）从单一实例迁移数据到redis集群（single to redis cluster）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[source]</span><br><span class="line">type: single</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line">[target]</span><br><span class="line">type: redis cluster</span><br><span class="line">servers:</span><br><span class="line"> - 127.0.0.1:7379</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">listen: 0.0.0.0:8888</span><br></pre></td></tr></table></figure></p><h2 id="监听redis-migrate-tool"><a href="#监听redis-migrate-tool" class="headerlink" title="监听redis-migrate-tool"></a>监听redis-migrate-tool</h2><p>可以使用redis-cli连接工具，监听地址和端口设置在配置文件的[common]下的listen，默认为127.0.0.1:8888</p><p><strong>1. info指令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$redis-cli -h 127.0.0.1 -p 8888</span><br><span class="line">127.0.0.1:8888&gt; info</span><br><span class="line"># Server</span><br><span class="line">version:0.1.0                                   # 工具的版本号</span><br><span class="line">os:Linux 2.6.32-573.12.1.el6.x86_64 x86_64      # 操作系统信息</span><br><span class="line">multiplexing_api:epoll                          # 多路复用接口</span><br><span class="line">gcc_version:4.4.7                               # gcc版本</span><br><span class="line">process_id:9199                                 # 工具的进程id</span><br><span class="line">tcp_port:8888                                   # 工具监听的tcp端口号</span><br><span class="line">uptime_in_seconds:1662                          # 工具运行的时间（秒）</span><br><span class="line">uptime_in_days:0                                # 工具运行的时间（天）</span><br><span class="line">config_file:/ect/rmt.conf                       # 工具运行的配置文件名称</span><br><span class="line"></span><br><span class="line"># Clients</span><br><span class="line">connected_clients:1                             # 当前连接的客户端数</span><br><span class="line">max_clients_limit:100                           # 客户端同时连接最大限制</span><br><span class="line">total_connections_received:3                    # 至今总共连接</span><br><span class="line"></span><br><span class="line"># Memory</span><br><span class="line">mem_allocator:jemalloc-4.0.4</span><br><span class="line"></span><br><span class="line"># Group</span><br><span class="line">source_nodes_count:32                          # 源redis组的节点数</span><br><span class="line">target_nodes_count:48                          # 目的redis组的节点数</span><br><span class="line"></span><br><span class="line"># Stats</span><br><span class="line">all_rdb_received:1                             # 是否已接收源redis组节点的所有.rdb文件</span><br><span class="line">all_rdb_parsed:1                               # 是否已解析源redis组节点的所有.rdb文件</span><br><span class="line">all_aof_loaded:0                               # 是否已加载源redis组节点的所有.aof文件</span><br><span class="line">rdb_received_count:32                          # 已接收的源redis组节点.rdb文件数</span><br><span class="line">rdb_parsed_count:32                            # 已解析的源redis组节点.rdb文件数</span><br><span class="line">aof_loaded_count:0                             # 已加载的源redis组节点.aof文件数</span><br><span class="line">total_msgs_recv:7753587                        # 从源组节点接收的所有消息数</span><br><span class="line">total_msgs_sent:7753587                        # 所有已发送目标节点并且收到的响应的消息数</span><br><span class="line">total_net_input_bytes:234636318                # 从源组接收的输入字节的总数</span><br><span class="line">total_net_output_bytes:255384129               # 已发送到目标组的输出字节的总数</span><br><span class="line">total_net_input_bytes_human:223.77M            # 同total_net_input_bytes，而是转换成人类可读的。</span><br><span class="line">total_net_output_bytes_human:243.55M           # 同total_net_output_bytes，而是转换成人类可读的。</span><br><span class="line">total_mbufs_inqueue:0                          # 来自源组的mbufs输入缓存的命令数据(不包括rdb数据)</span><br><span class="line">total_msgs_outqueue:0                          # 将被发送到目标组，和已被发送到目标，但正在等待响应的消息数</span><br><span class="line">127.0.0.1:8888&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2. shutdown [seconds|asap]</strong></p><p>执行指令后的行为：</p><ul><li>停止从源redis复制</li><li>尝试将工具中的缓存数据发送到目标redis</li><li>Redis-migrate-tool 停止，退出</li></ul><p>参数：</p><ul><li><code>seconds</code>：工具用于在退出之前将缓存的数据发送到目标redis的大多数时间。默认为10秒。</li><li><code>asap</code>：不关心缓存的数据，立即退出。</li></ul><p>例如，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h 127.0.0.1 -p 8888</span><br><span class="line">127.0.0.1:8888&gt; shutdown 5</span><br><span class="line">OK</span><br><span class="line">(5.00s)</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>不适用redis4.0.x及以上版本（高版本迁移小编会尽快出~）</li><li>当源中存在多库时，避免发生键值覆盖，最好换别的方式迁移</li><li>多源要不都不带密码，要不源是同一个密码，否则无法启动，在线变更密码可以通过<code>config set requirepass [密码]</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;redis-migrate-tool 是维品会开源的一款redis数据迁移工具，基于redis复制，快速，稳定，github地址为：&lt;a href=&quot;https://github.com/vipshop/redis-migrate-tool&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/vipshop/redis-migrate-tool&lt;/a&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速。&lt;/li&gt;
&lt;li&gt;多线程。&lt;/li&gt;
&lt;li&gt;基于redis复制。&lt;/li&gt;
&lt;li&gt;实时迁移。&lt;/li&gt;
&lt;li&gt;迁移过程中，源集群不影响对外提供服务。&lt;/li&gt;
&lt;li&gt;异构迁移。&lt;/li&gt;
&lt;li&gt;支持Twemproxy集群，redis cluster集群，rdb文件 和 aof文件。&lt;/li&gt;
&lt;li&gt;过滤功能。&lt;/li&gt;
&lt;li&gt;当目标集群是Twemproxy，数据会跳过Twemproxy直接导入到后端的redis。&lt;/li&gt;
&lt;li&gt;迁移状态显示。&lt;/li&gt;
&lt;li&gt;完善的数据抽样校验(-C redis_check)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;划重点 &lt;strong&gt;实时迁移&lt;/strong&gt; &lt;strong&gt;迁移过程中，源集群不影响对外提供服务&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://sunflowercoder.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis Cluster数据迁移单实例方案实战</title>
    <link href="https://sunflowercoder.com/Cluster%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%8D%95%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%A1%88%E5%AE%9E%E6%88%98/"/>
    <id>https://sunflowercoder.com/Cluster数据迁移单实例方案实战/</id>
    <published>2019-08-01T08:19:07.000Z</published>
    <updated>2019-08-07T03:37:57.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis集群同步迁移的方法有很多，比如redis-port,redis-migrate-tool等工具，本文主要讲CentOS通过redis-migrate-tool从集群迁移到单实例。</p><p>redis-migrate-tool 是维品会开源的一款redis数据迁移工具，基于redis复制，快速，稳定，github地址为：<a href="https://github.com/vipshop/redis-migrate-tool" target="_blank" rel="noopener">https://github.com/vipshop/redis-migrate-tool</a> 。</p><p>迁移工具的来源（source）可以是：单独的redis实例，twemproxy集群，redis cluster，rdb文件，aof文件。<br>迁移工具的目标（target）可以是：单独的redis实例，twemproxy集群，redis cluster，rdb文件。<br><a id="more"></a><br>目前测试的Redis版本为3.0.0，如果是4.0.x版本可能会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[2019-07-31 16:57:50.393] rmt_redis.c:1517 MASTER &lt;-&gt; SLAVE sync: receiving 4860 bytes from master[172.16.255.34:7001@17001]</span><br><span class="line">[2019-07-31 16:57:50.393] rmt_redis.c:1623 MASTER &lt;-&gt; SLAVE sync: RDB data for node[172.16.255.34:7001@17001] is received, used: 0 s</span><br><span class="line">[2019-07-31 16:57:50.393] rmt_redis.c:1643 rdb file node172.16.255.34:7001@17001-1564563470312707-6709.rdb write complete</span><br><span class="line">[2019-07-31 16:57:50.393] rmt_redis.c:6446 ERROR: Can&apos;t handle RDB format version -1549717496</span><br><span class="line">[2019-07-31 16:57:50.393] rmt_redis.c:6715 ERROR: Rdb file for node[172.16.255.34:7001@17001] parsed failed</span><br></pre></td></tr></table></figure></p><p>如上<code>Can&#39;t handle RDB format version -1549717496</code>为版本兼容问题，各个版本的.rdb是不兼容的，rmt工具似乎还不支持4.0.X。</p><p>可考虑降版本，如果开启了<code>appendonly  yes</code>，可通过.aof文件迁移。</p><p>当前集群数据存在 </p><blockquote><p>172.16.255.34:7000 172.16.255.34:7001<br>172.16.255.35:7002 172.16.255.35:7003<br>172.16.255.36:7004 172.16.255.36:7005</p></blockquote><p>需要将集群的数据迁移到单实例的172.16.255.34:6379</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install automake libtool autoconf bzip2 git</span><br></pre></td></tr></table></figure></p><p>安装redis-migrate-tool：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/vipshop/redis-migrate-tool</span><br><span class="line">$ cd redis-migrate-tool</span><br><span class="line">$ autoreconf -fvi</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure></p><p>查看命令帮助可检查是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-migrate-tool -h</span><br></pre></td></tr></table></figure></p><p>如果出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-migrate-tool -h</span><br><span class="line">This is redis-migrate-tool-0.1.0</span><br><span class="line"></span><br><span class="line">Usage: redis-migrate-tool [-?hVdIn] [-v verbosity level] [-o output file]</span><br><span class="line">                  [-c conf file] [-C command]</span><br><span class="line">                  [-f source address] [-t target address]</span><br><span class="line">                  [-p pid file] [-m mbuf size] [-r target role]</span><br><span class="line">                  [-T thread number] [-b buffer size]</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><p>安装成功。</p><p id="div-border-left-green">更多介绍<a href="../../redis-migrate-tool使用详解">查看redis-migrate-tool使用详解</a></p><h2 id="配置文件更改"><a href="#配置文件更改" class="headerlink" title="配置文件更改"></a>配置文件更改</h2><p>redis-migrate-tool默认的配置文件为rmt.conf，更改如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ vi rmt.conf</span><br><span class="line"></span><br><span class="line">[source]</span><br><span class="line">type: redis cluster</span><br><span class="line">servers :</span><br><span class="line">-172.16.255.34:7000</span><br><span class="line"></span><br><span class="line">[target]</span><br><span class="line">type: single</span><br><span class="line">servers:</span><br><span class="line">-172.16.255.34:6379</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">listen: 0.0.0.0:8888</span><br></pre></td></tr></table></figure></p><p>Esc  :wq 保存退出。</p><p>source为集群，只需要配置一个servers就可以。</p><h2 id="开始迁移"><a href="#开始迁移" class="headerlink" title="开始迁移"></a>开始迁移</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-migrate-tool -o log -d</span><br></pre></td></tr></table></figure><p>开始在后台运行迁移，查看运行日志 <code>tail -200 log</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">[2019-08-01 11:59:19.919] rmt_redis.c:6601 Rdb file for node[172.16.255.34:7000] parsed finished, use: 0 s.</span><br><span class="line">[2019-08-01 11:59:19.919] rmt_redis.c:6709 All nodes&apos; rdb file parsed finished for this write thread(0).</span><br></pre></td></tr></table></figure></p><p>可看见<code>All nodes&#39; rdb file parsed finished</code>则表示运行完成。</p><p><strong>运行数据检查</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-migrate-tool -o log -d -C redis_check</span><br></pre></td></tr></table></figure></p><p>默认抽样1000个数据检查<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Check job is running...</span><br><span class="line"></span><br><span class="line">Checked keys: 1000</span><br><span class="line">Inconsistent value keys: 0</span><br><span class="line">Inconsistent expire keys : 0</span><br><span class="line">Other check error keys: 0</span><br><span class="line">Checked OK keys: 1000</span><br><span class="line"></span><br><span class="line">All keys checked OK!</span><br><span class="line">Check job finished, used 1.041s</span><br></pre></td></tr></table></figure></p><p>迁移成功~</p><p>如果中途迁移失败，使用<code>redis-cli -h 172.16.255.34</code>，清除keys<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.16.255.34:6379&gt; flushall</span><br></pre></td></tr></table></figure></p><p><code>keys *</code>检查是否清空，以免list等数据迁移时会增量，redis_check会检查一部分数据不一致，你会发现都是显示list<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2019-07-31 17:00:27.185] rmt_check.c:848 ERROR: key checked failed: check key&apos;s value error, value is inconsistent. key(len:15, type:list): 509A4C6A4WAY_46</span><br></pre></td></tr></table></figure></p><p>Java使用JedisCluster连接集群的改成JedisPool<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">    if (mJedis == null) &#123;</span><br><span class="line">        mJedisPool = new JedisPool(genericObjectPoolConfig, hostName, Integer.valueOf(port), timeout);</span><br><span class="line">        mJedis = mJedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private Jedis jedis;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Redis集群同步迁移的方法有很多，比如redis-port,redis-migrate-tool等工具，本文主要讲CentOS通过redis-migrate-tool从集群迁移到单实例。&lt;/p&gt;
&lt;p&gt;redis-migrate-tool 是维品会开源的一款redis数据迁移工具，基于redis复制，快速，稳定，github地址为：&lt;a href=&quot;https://github.com/vipshop/redis-migrate-tool&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/vipshop/redis-migrate-tool&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;迁移工具的来源（source）可以是：单独的redis实例，twemproxy集群，redis cluster，rdb文件，aof文件。&lt;br&gt;迁移工具的目标（target）可以是：单独的redis实例，twemproxy集群，redis cluster，rdb文件。&lt;br&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://sunflowercoder.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>git出现RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errfno 10054</title>
    <link href="https://sunflowercoder.com/git%E5%87%BA%E7%8E%B0RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errfno-10054/"/>
    <id>https://sunflowercoder.com/git出现RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errfno-10054/</id>
    <published>2019-07-29T09:36:48.000Z</published>
    <updated>2019-08-05T10:39:14.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Hexo博客增加本地文件资源下载之后，deploy发布时出现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errfno 10054</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">Everything up-to-date</span><br></pre></td></tr></table></figure></p><p>主要是因为一次性提交的文件过大，超出了HTTP缓存的上限。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><a id="more"></a><p>通过配置缓存可解决。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 100M</span><br></pre></td></tr></table></figure></p><p>查看配置<code>git config --list</code><br><img src="/git出现RPC-failed-curl-56-OpenSSL-SSL-read-SSL-ERROR-SYSCALL-errfno-10054/1564396087.jpg" title="1564396087.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在Hexo博客增加本地文件资源下载之后，deploy发布时出现：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errfno 10054&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatal: The remote end hung up unexpectedly&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Everything up-to-date&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;主要是因为一次性提交的文件过大，超出了HTTP缓存的上限。&lt;/p&gt;
&lt;h3 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://sunflowercoder.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy+Selenium爬取动态渲染网站</title>
    <link href="https://sunflowercoder.com/Scrapy-Selenium%E7%88%AC%E5%8F%96%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E7%BD%91%E7%AB%99/"/>
    <id>https://sunflowercoder.com/Scrapy-Selenium爬取动态渲染网站/</id>
    <published>2019-07-17T10:53:44.000Z</published>
    <updated>2019-08-07T03:33:19.141Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Selenium是一个用于Web应用程序测试的工具。直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Firefox，Safari，Chrome，Opera等，在爬虫上则是模拟正常用户访问网页并获取数据。</p><h2 id="2-安装-Selenium"><a href="#2-安装-Selenium" class="headerlink" title="2.安装 Selenium"></a>2.安装 Selenium</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pip install selenium</span><br></pre></td></tr></table></figure><h2 id="3-安装驱动"><a href="#3-安装驱动" class="headerlink" title="3.安装驱动"></a>3.安装驱动</h2><p>模拟真正的用户操作当然需要选择好用来操作的浏览器，根据浏览器来安装相应的驱动调起。</p><a id="more"></a><h3 id="3-1-Chrome"><a href="#3-1-Chrome" class="headerlink" title="3.1 Chrome"></a>3.1 Chrome</h3><p>使用selenium驱动chrome浏览器需要下载chromedriver，而且chromedriver版本需要与chrome的版本对应，版本错误的话则会运行报错。</p><p>查看chrome的版本，可通过<code>帮助 &gt; 关于Google Chrome(G)</code>。</p><img src="/Scrapy-Selenium爬取动态渲染网站/1563419114.jpg" title="查看Chrome版本"><p>下载chromedriver可以通过淘宝镜像地址：<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/chromedriver/</a> 。最新的镜像与Chrome同名，尽量选择版本相近的避免兼容问题，镜像下notes.txt可查看当前驱动支持的版本。</p><img src="/Scrapy-Selenium爬取动态渲染网站/1563418582.jpg" title="chromedriver版本"><p>选择合适的版本下载，下载完解压将chromedriver.exe放在有设置环境变量的目录下，小编是放在python的安装目录下的，即python.exe所在的目录。</p><img src="/Scrapy-Selenium爬取动态渲染网站/1563419759.jpg" title="1563419759.jpg"><h3 id="3-2-Firefox"><a href="#3-2-Firefox" class="headerlink" title="3.2 Firefox"></a>3.2 Firefox</h3><p>使用selenium驱动Firefox浏览器需要下载geckodriver，查看浏览器版本通过<code>帮助 &gt; 关于 Firefox</code>。</p><img src="/Scrapy-Selenium爬取动态渲染网站/1563420565.jpg" title="Firefox版本"><p>下载geckodriver可通过mozilla的仓库地址：<a href="https://github.com/mozilla/geckodriver/releases。" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases。</a></p><p>选择合适的版本下载，解压后geckodriver.exe同样也是放在python的安装目录下。</p><img src="/Scrapy-Selenium爬取动态渲染网站/1563420774.jpg" title="1563420774.jpg"><h3 id="3-3-其它浏览器驱动下载"><a href="#3-3-其它浏览器驱动下载" class="headerlink" title="3.3 其它浏览器驱动下载"></a>3.3 其它浏览器驱动下载</h3><p>Opera：<a href="http://npm.taobao.org/mirrors/operadriver/" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/operadriver/</a></p><p>IE：<a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://selenium-release.storage.googleapis.com/index.html</a> （版本号要与selenium的版本一致，查看安装的selenium版本，可通过<code>pip show selenium</code>）如果没有vpn可能会打不开，可<a href="/download/IEDriverServer.zip">点击下载</a>3.14.0版本的。</p><h2 id="4-Selenium使用"><a href="#4-Selenium使用" class="headerlink" title="4.Selenium使用"></a>4.Selenium使用</h2><h3 id="4-1-Chrome-配置"><a href="#4-1-Chrome-配置" class="headerlink" title="4.1 Chrome 配置"></a>4.1 Chrome 配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment">## 无界面</span></span><br><span class="line"><span class="comment"># options.add_argument('--headless')</span></span><br><span class="line">driver = webdriver.Chrome(chrome_options=options)</span><br><span class="line">driver.set_window_size(<span class="number">1366</span>, <span class="number">768</span>)</span><br><span class="line">driver.set_page_load_timeout(self.timeout)</span><br></pre></td></tr></table></figure><p>注意Chrome可能需要管理员权限相关配置，小编习惯性用Firefox😂</p><h3 id="4-2-Firefox-配置"><a href="#4-2-Firefox-配置" class="headerlink" title="4.2 Firefox 配置"></a>4.2 Firefox 配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化参数对象</span></span><br><span class="line">options = webdriver.FirefoxOptions()</span><br><span class="line"><span class="comment"># 无界面</span></span><br><span class="line"><span class="comment"># options.add_argument('--headless')</span></span><br><span class="line">driver = webdriver.Firefox(firefox_options=options)</span><br><span class="line">driver.set_window_size(<span class="number">1400</span>, <span class="number">700</span>)</span><br><span class="line">driver.set_page_load_timeout(self.timeout)</span><br></pre></td></tr></table></figure><h3 id="4-3-不显示打开浏览器的界面"><a href="#4-3-不显示打开浏览器的界面" class="headerlink" title="4.3 不显示打开浏览器的界面"></a>4.3 不显示打开浏览器的界面</h3><p>有的时候我们不想要看到爬取的一步步操作，只关心结果，则可以在参数配置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无界面</span></span><br><span class="line">options.add_argument(<span class="string">'--headless'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="4-4-禁用浏览器弹窗"><a href="#4-4-禁用浏览器弹窗" class="headerlink" title="4.4 禁用浏览器弹窗"></a>4.4 禁用浏览器弹窗</h3><p>不是页面弹窗，是浏览器设置里的弹窗。在打开浏览器时，使用参数配置关闭<br><strong>Firefox</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">options.set_preference(<span class="string">'dom.webnotifications.enabled'</span>, <span class="literal">False</span>)</span><br><span class="line">options.set_preference(<span class="string">'dom.push.enabled'</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure></p><p><strong>Chrome</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prefs = &#123;</span><br><span class="line">    <span class="string">'profile.default_content_setting_values'</span>: &#123;</span><br><span class="line">        <span class="string">'notifications'</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">'prefs'</span>, prefs)</span><br></pre></td></tr></table></figure></p><h3 id="4-5-driver属性和方法"><a href="#4-5-driver属性和方法" class="headerlink" title="4.5 driver属性和方法"></a>4.5 driver属性和方法</h3><ul><li><p>页面加载</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br></pre></td></tr></table></figure></li><li><p>关闭浏览器</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬虫结束关闭浏览器</span></span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></li><li><p>获取当前url</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.current_url</span><br></pre></td></tr></table></figure></li><li><p>刷新</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.refresh()</span><br></pre></td></tr></table></figure></li><li><p>页面标题</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.title</span><br></pre></td></tr></table></figure></li><li><p>页面渲染后的源码</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.page_source</span><br></pre></td></tr></table></figure></li><li><p>获取窗口信息</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.get_window_rect()</span><br></pre></td></tr></table></figure><p>  获取当前窗口的x,y坐标和当前窗口的高度和宽度，如：{‘height’: 1366, ‘width’: 768, ‘x’: 0, ‘y’: 200}</p></li><li><p>设置 User Agent(Firefox为例)</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">profile = webdriver.FirefoxProfile()</span><br><span class="line">profile.set_preference(<span class="string">"general.useragent.override"</span>, <span class="string">"some UA string"</span>)</span><br><span class="line">driver = webdriver.Firefox(profile=profile)</span><br></pre></td></tr></table></figure></li><li><p>执行js脚本</p><p>  使用<code>driver.execute_script([js脚本],*args)</code>同步执行，如滑动到第一个class为cm-explain-bottom的元素位置。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(</span><br><span class="line">   <span class="string">"document.getElementsByClassName('cm-explain-bottom')[0].scrollIntoView(true)"</span>)</span><br></pre></td></tr></table></figure><p>  异步执行使用<code>driver.execute_async_script([js脚本],*args)</code>，*argsw为执行js代码要传入的参数。</p></li><li><p>查找元素</p><p>  返回一个<code>WebElement</code>对象。</p><ul><li>通过id属性：<code>element = driver.find_element_by_id(&quot;coolestWidgetEvah&quot;)</code></li><li>通过class属性：<code>cheeses = driver.find_elements_by_class_name(&quot;cheese&quot;)</code></li><li>通过标签名：<code>frame = driver.find_element_by_tag_name(&quot;iframe&quot;)</code></li><li>通过css选择器：<code>cheese = driver.find_element_by_css_selector(&quot;#food span.dairy.aged&quot;)</code></li><li>通过name属性：<code>cheese = driver.find_element_by_name(&quot;cheese&quot;)</code></li><li>通过xpath：<code>inputs = driver.find_elements_by_xpath(&quot;//input&quot;)</code></li><li>通过链接文本（完全匹配）：<code>cheese = driver.find_element_by_link_text(&quot;cheese&quot;)</code></li><li>通过链接文本（部分匹配）：<code>cheese = driver.find_element_by_partial_link_text(&quot;cheese&quot;)</code></li></ul></li><li><p>元素(WebElement)的属性和方法</p><ul><li>标签下文本：<code>element.text</code></li><li>点击：<code>element.click()</code></li><li>表单提交：<code>element.submit()</code></li><li><p>输入：<code>element.send_keys(123)</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等待邮箱和密码可定位及登录按钮可提交，清空输入框，分别输入用户名密码点击提交按钮</span></span><br><span class="line">email = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">"#email"</span>)))</span><br><span class="line">passwd = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">"#pass"</span>)))</span><br><span class="line">submit = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'#loginbutton'</span>)))</span><br><span class="line">email.clear()</span><br><span class="line">passwd.clear()</span><br><span class="line">email.send_keys(user)</span><br><span class="line">passwd.send_keys(password)</span><br><span class="line">submit.click()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Cookie操作</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">"http://www.example.com"</span>)</span><br><span class="line"><span class="comment"># 给当前url域设置cookie</span></span><br><span class="line"><span class="comment"># name的值对应cookie key，value的值对应cookie value</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">'name'</span>:<span class="string">'key'</span>, <span class="string">'value'</span>:<span class="string">'value'</span>, <span class="string">'path'</span>:<span class="string">'/'</span>&#125;)</span><br><span class="line"><span class="comment"># 可选的属性</span></span><br><span class="line"><span class="comment"># 'domain' -&gt; String,</span></span><br><span class="line"><span class="comment"># 'secure' -&gt; Boolean,</span></span><br><span class="line"><span class="comment"># 'expiry' -&gt; Milliseconds since the Epoch it should expire.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出当前url所有的Cookie</span></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%s -&gt; %s"</span> % (cookie[<span class="string">'name'</span>], cookie[<span class="string">'value'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过name删除Cookie</span></span><br><span class="line">driver.delete_cookie(<span class="string">"CookieName"</span>)</span><br><span class="line"><span class="comment"># 删除所有的Cookie</span></span><br><span class="line">driver.delete_all_cookies()</span><br></pre></td></tr></table></figure></li><li><p>切换页面框架或窗口</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.window(<span class="string">"windowName"</span>)</span><br></pre></td></tr></table></figure><p>  切换默认框架：<code>driver.switch_to.default_content()</code></p><p>  切换最新窗口：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">windows = driver.window_handles</span><br><span class="line"><span class="comment"># 切换到最新打开的窗口中</span></span><br><span class="line">switch_to.window(windows[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure></li><li><p>获取最新的alert弹窗</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert = driver.switch_to.alert</span><br><span class="line"><span class="comment"># 关闭弹窗</span></span><br><span class="line">alert.dismiss()</span><br></pre></td></tr></table></figure></li><li><p>当前的url返回或者跟进</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.forward()</span><br><span class="line">driver.back()</span><br></pre></td></tr></table></figure></li><li><p>截屏</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回页面的base64编码字符串</span></span><br><span class="line">base64 = driver.get_screenshot_as_base64()</span><br><span class="line"><span class="comment"># 返回保存到文件的结果</span></span><br><span class="line">result = driver.get_screenshot_as_file(<span class="string">"D:\\example.png"</span>)</span><br><span class="line"><span class="comment"># png格式的二进制字符串</span></span><br><span class="line">pngSrc =  driver.get_screenshot_as_png()</span><br></pre></td></tr></table></figure></li></ul><p>使用Selenium爬取七麦数据APP排行榜：<a href="../../Scrapy-爬取七麦-app数据排行榜/">点击前往</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h2&gt;&lt;p&gt;Selenium是一个用于Web应用程序测试的工具。直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Firefox，Safari，Chrome，Opera等，在爬虫上则是模拟正常用户访问网页并获取数据。&lt;/p&gt;
&lt;h2 id=&quot;2-安装-Selenium&quot;&gt;&lt;a href=&quot;#2-安装-Selenium&quot; class=&quot;headerlink&quot; title=&quot;2.安装 Selenium&quot;&gt;&lt;/a&gt;2.安装 Selenium&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; pip install selenium&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-安装驱动&quot;&gt;&lt;a href=&quot;#3-安装驱动&quot; class=&quot;headerlink&quot; title=&quot;3.安装驱动&quot;&gt;&lt;/a&gt;3.安装驱动&lt;/h2&gt;&lt;p&gt;模拟真正的用户操作当然需要选择好用来操作的浏览器，根据浏览器来安装相应的驱动调起。&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="https://sunflowercoder.com/categories/Scrapy/"/>
    
    
  </entry>
  
  <entry>
    <title>Scrapy-爬取有道翻译的单词释义</title>
    <link href="https://sunflowercoder.com/Scrapy-%E7%88%AC%E5%8F%96%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91%E7%9A%84%E5%8D%95%E8%AF%8D%E9%87%8A%E4%B9%89/"/>
    <id>https://sunflowercoder.com/Scrapy-爬取有道翻译的单词释义/</id>
    <published>2019-07-16T10:52:59.000Z</published>
    <updated>2019-08-07T03:29:13.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>熟悉Scrapy框架后，我们手写第一个爬虫，爬取有道翻译的单词发音，发音文件链接，释义，例句。</p><p id="div-border-left-yellow">需要先熟悉Scrapy框架的同学：<a href="../../Scrapy详解-爬虫框架入门看这一篇就够了！/">点击学习</a></p><p>如单词<code>proportion</code>：有道翻译的详情连接为 <a href="http://dict.youdao.com/w/eng/proportion" target="_blank" rel="noopener">http://dict.youdao.com/w/eng/proportion</a> 。本篇文章爬取的内容结果：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"example"</span>: [&#123;<span class="attr">"en"</span>: <span class="string">"I seemed to have lost all sense of proportion."</span>,</span><br><span class="line">              <span class="attr">"zh"</span>: <span class="string">"我好象已经丧失了有关比例的一切感觉。"</span>&#125;,</span><br><span class="line">             &#123;<span class="attr">"en"</span>: <span class="string">"The price of this article is out of(all) proportion to its value."</span>,</span><br><span class="line">              <span class="attr">"zh"</span>: <span class="string">"这个商品的价格与它的价值完全不成比例。"</span>&#125;,</span><br><span class="line">             &#123;<span class="attr">"en"</span>: <span class="string">"But, the use of interception bases on the violation of the citizen rights, so it should be satisfactory of the principle of legal reservation and the principle of proportion."</span>,</span><br><span class="line">              <span class="attr">"zh"</span>: <span class="string">"但是，监听的适用是以侵害公民权利为前提的，因此监听在刑事侦查中的运用必须满足法律保留原则和比例原则的要求。"</span>&#125;],</span><br><span class="line"> <span class="attr">"explain"</span>: [<span class="string">"n. 比例，占比；部分；面积；均衡"</span>, <span class="string">"vt. 使成比例；使均衡；分摊"</span>],</span><br><span class="line"> <span class="attr">"pron"</span>: <span class="string">"[prə'pɔːʃ(ə)n]"</span>,</span><br><span class="line"> <span class="attr">"pron_url"</span>: <span class="string">"http://dict.youdao.com/dictvoice?audio=proportion&amp;type=1"</span>,</span><br><span class="line"> <span class="attr">"word"</span>: <span class="string">"proportion"</span>&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><img src="/Scrapy-爬取有道翻译的单词释义/1563274686.jpg" title="proportion有道释义"><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>在需要创建的目录下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject youdaoeng</span><br></pre></td></tr></table></figure></p><p>回车即可创建默认的Scrapy项目架构。</p><img src="/Scrapy-爬取有道翻译的单词释义/1563274952.jpg" title="youdaoeng项目架构"><h2 id="创建Item"><a href="#创建Item" class="headerlink" title="创建Item"></a>创建Item</h2><p>创建YoudaoengItem继承scrapy.Item，并定义需要存储的单词，发音，发音文件链接，释义，例句。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YoudaoengItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    <span class="comment"># 单词</span></span><br><span class="line">    word = scrapy.Field()</span><br><span class="line">    <span class="comment"># 英式发音</span></span><br><span class="line">    pron = scrapy.Field()</span><br><span class="line">    <span class="comment"># 发音audio文件链接</span></span><br><span class="line">    pron_url = scrapy.Field()</span><br><span class="line">    <span class="comment"># 释义</span></span><br><span class="line">    explain = scrapy.Field()</span><br><span class="line">    <span class="comment"># 例句</span></span><br><span class="line">    example = scrapy.Field()</span><br></pre></td></tr></table></figure></p><h2 id="创建Spider"><a href="#创建Spider" class="headerlink" title="创建Spider"></a>创建Spider</h2><p>在<code>spiders</code>目录下创建<code>EngSpider.py</code>，并创建<code>class EngSpider</code>，继承于Spider。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Spider</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EngSpider</span><span class="params">(Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"EngSpider"</span></span><br><span class="line">    <span class="comment"># 允许访问的域</span></span><br><span class="line">    allowed_domains = [<span class="string">"dict.youdao.com"</span>]</span><br><span class="line"></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://dict.youdao.com/w/eng/agree'</span>, <span class="string">'http://dict.youdao.com/w/eng/prophet'</span>,</span><br><span class="line">                <span class="string">'http://dict.youdao.com/w/eng/proportion'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><ul><li><code>name</code>：用于区别Spider，该名字必须是唯一的。</li><li><code>start_urls</code>：Spider在启动时进行爬取的url列表，首先会爬取第一个。</li><li><code>def parse(self, response)</code>：得到请求url后的response信息的解析方法。</li></ul><p>有道翻译的网址为<a href="http://dict.youdao.com/" target="_blank" rel="noopener">http://dict.youdao.com/</a> ，根据分析，查询英文单词结果后链接更改，如查询<code>agree</code>，跳转单词详情地址为<a href="http://dict.youdao.com/w/eng/agree" target="_blank" rel="noopener">http://dict.youdao.com/w/eng/agree</a> 。所以几乎可以认为单词的详情页链接可以是<a href="http://dict.youdao.com/w/eng/" target="_blank" rel="noopener">http://dict.youdao.com/w/eng/</a> 拼接上单词本身，所以配置<code>start_urls</code>我们查询三个单词的释义详情。</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>解析用的Selectors选择器有多种方法：</p><ul><li>xpath(): 传入xpath表达式，返回该表达式所对应的所有节点的selector list列表 。</li><li>css(): 传入CSS表达式，返回该表达式所对应的所有节点的selector list列表.</li><li>extract(): 序列化该节点为unicode字符串并返回list。</li><li>re(): 根据传入的正则表达式对数据进行提取，返回unicode字符串list列表。</li></ul><p>下面我们用xpath()选择节点，xpath的语法可参考w3c的<a href="http://www.w3school.com.cn/xpath/xpath_nodes.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/xpath/xpath_nodes.asp</a> 学习，需要熟悉语法、运算符、函数等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    box = response.xpath(<span class="string">'//*[@id="results-contents"]'</span>)</span><br><span class="line">    word = YoudaoengItem()</span><br><span class="line">    <span class="comment"># 简明释义</span></span><br><span class="line">    box_simple = box.xpath(<span class="string">'.//*[@id="phrsListTab"]'</span>)</span><br><span class="line">    <span class="comment"># 判断查出来的字是否存在</span></span><br><span class="line">    <span class="keyword">if</span> box_simple:</span><br><span class="line">        <span class="comment"># 单词</span></span><br><span class="line">        word[<span class="string">'word'</span>] = box_simple.xpath(<span class="string">'.//h2[@class="wordbook-js"]//span[@class="keyword"]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 英式发音</span></span><br><span class="line">        word[<span class="string">'pron'</span>] = box_simple.xpath(</span><br><span class="line">            <span class="string">'.//h2[@class="wordbook-js"]//div[@class="baav"]//*[@class="phonetic"]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 发音链接</span></span><br><span class="line">        word[<span class="string">'pron_url'</span>] = <span class="string">"http://dict.youdao.com/dictvoice?audio="</span> + word[<span class="string">'word'</span>] + <span class="string">"&amp;type=1"</span></span><br><span class="line">        <span class="comment"># 释义</span></span><br><span class="line">        word[<span class="string">'explain'</span>] = []</span><br><span class="line">        temp = box_simple.xpath(<span class="string">'.//div[@class="trans-container"]//ul//li/text()'</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> temp:</span><br><span class="line">            <span class="keyword">if</span> len(item) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> re.search(<span class="string">r'\n'</span>, item) <span class="keyword">and</span> <span class="keyword">not</span> re.match(<span class="string">r' '</span>, item):</span><br><span class="line">                print(item)</span><br><span class="line">                word[<span class="string">'explain'</span>].append(item)</span><br><span class="line">        <span class="comment"># 例句</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        word[<span class="string">'example'</span>] = []</span><br><span class="line">        example_root = box.xpath(<span class="string">'//*[@id="bilingual"]//ul[@class="ol"]/li'</span>)</span><br><span class="line">        <span class="comment"># 1.双语例句是否存在</span></span><br><span class="line">        <span class="keyword">if</span> example_root:</span><br><span class="line">            <span class="keyword">for</span> li <span class="keyword">in</span> example_root:</span><br><span class="line">                en = <span class="string">""</span></span><br><span class="line">                <span class="keyword">for</span> span <span class="keyword">in</span> li.xpath(<span class="string">'./p[1]/span'</span>):</span><br><span class="line">                    <span class="keyword">if</span> span.xpath(<span class="string">'./text()'</span>).extract():</span><br><span class="line">                        en += span.xpath(<span class="string">'./text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">elif</span> span.xpath(<span class="string">'./b/text()'</span>).extract():</span><br><span class="line">                        en += span.xpath(<span class="string">'./b/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">                zh = str().join(li.xpath(<span class="string">'./p[2]/span/text()'</span>).extract()).replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">                word[<span class="string">'example'</span>].append(dict(en=en.replace(<span class="string">'\"'</span>, <span class="string">'\\"'</span>), zh=zh))</span><br><span class="line">        <span class="comment">#  2.柯林斯英汉双解大辞典的例句是否存在</span></span><br><span class="line">        <span class="keyword">elif</span> box.xpath(<span class="string">'//*[@id="collinsResult"]//ul[@class="ol"]//div[@class="examples"]'</span>):</span><br><span class="line">            example_root = box.xpath(<span class="string">'//*[@id="collinsResult"]//ul[@class="ol"]//li'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> example_root:</span><br><span class="line">                <span class="keyword">if</span> i.xpath(<span class="string">'.//*[@class="exampleLists"]'</span>):</span><br><span class="line">                    en = i.xpath(</span><br><span class="line">                        <span class="string">'.//*[@class="exampleLists"][1]//div[@class="examples"]/p[1]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">                    zh = i.xpath(</span><br><span class="line">                        <span class="string">'.//*[@class="exampleLists"][1]//div[@class="examples"]/p[2]/text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">                    word[<span class="string">'example'</span>].append(dict(en=en.replace(<span class="string">'\"'</span>, <span class="string">'\\"'</span>), zh=zh))</span><br><span class="line">                    <span class="keyword">if</span> len(word[<span class="string">'example'</span>]) &gt;= <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">yield</span> word</span><br></pre></td></tr></table></figure><p>最后 <code>yield word</code>则是返回解析的word 给<code>Item Pipeline</code>，进行随后的数据过滤或者存储。</p><h2 id="运行爬虫-爬取单词释义"><a href="#运行爬虫-爬取单词释义" class="headerlink" title="运行爬虫-爬取单词释义"></a>运行爬虫-爬取单词释义</h2><p>运行爬虫，会爬取agree、prophet、proportion三个单词的详情，在项目目录下（scrapy.cfg所在的目录）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youdaoeng&gt;scrapy crawl EngSpider -o data.json</span><br></pre></td></tr></table></figure></p><p>即可运行，窗口可以看见爬取的日志内容输出，运行结束后会在项目目录下生成一个data.json文件。<br><img src="/Scrapy-爬取有道翻译的单词释义/1563334153.jpg" title="开始爬取"><br><img src="/Scrapy-爬取有道翻译的单词释义/1563334228.jpg" title="Item输出"><br><img src="/Scrapy-爬取有道翻译的单词释义/1563335067.jpg" title="生成的data.json"></p><p>生成的数据为所有item的json格式数组，中文字符都是Unicode编码，可通过一些在线的json解析网站如 <a href="https://www.bejson.com/" target="_blank" rel="noopener">https://www.bejson.com/</a> ，Unicode转中文查看是我们想要的结果。</p><h2 id="下载单词语音文件"><a href="#下载单词语音文件" class="headerlink" title="下载单词语音文件"></a>下载单词语音文件</h2><p>单词读音的mp3链接为解析时候保存的<code>pron_url</code>字段，接下来我们下载单词mp3文件到本地。<br>在Item下增加属性<code>pron_save_path</code>，存储发音文件的本地地址：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发音 mp3 本地存放路径</span></span><br><span class="line">    pron_save_path = scrapy.Field()</span><br></pre></td></tr></table></figure></p><p>并在settings.py文件中配置下载文件的目录，如在D:\scrapy_files\目录下，则配置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILES_STORE = <span class="string">"D:\\scrapy_files\\"</span></span><br></pre></td></tr></table></figure></p><p>增加ItemPipeline重新发起文件下载请求：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mp3Pipeline</span><span class="params">(FilesPipeline)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    自定义文件下载管道</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span><span class="params">(self, item, info)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        根据文件的url发送请求（url跟进）</span></span><br><span class="line"><span class="string">        :param item:</span></span><br><span class="line"><span class="string">        :param info:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># meta携带的数据可以在response获取到</span></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=item[<span class="string">'pron_url'</span>], meta=&#123;<span class="string">'item'</span>: item&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_completed</span><span class="params">(self, results, item, info)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        处理请求结果</span></span><br><span class="line"><span class="string">        :param results:</span></span><br><span class="line"><span class="string">        :param item:</span></span><br><span class="line"><span class="string">        :param info:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        file_paths = [x[<span class="string">'path'</span>] <span class="keyword">for</span> ok, x <span class="keyword">in</span> results <span class="keyword">if</span> ok]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_paths:</span><br><span class="line">            <span class="keyword">raise</span> DropItem(<span class="string">"Item contains no files"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># old_name = FILES_STORE + file_paths[0]</span></span><br><span class="line">        <span class="comment"># new_name = FILES_STORE + item['word'] + '.mp3'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 文件重命名 （相当于剪切）</span></span><br><span class="line">        <span class="comment"># os.rename(old_name, new_name)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># item['pron_save_path'] = new_name</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回的result是除去FILES_STORE的目录</span></span><br><span class="line">        item[<span class="string">'pron_save_path'</span>] = FILES_STORE + file_paths[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_path</span><span class="params">(self, request, response=None, info=None)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        自定义文件保存路径</span></span><br><span class="line"><span class="string">        默认的保存路径是在FILES_STORE下创建的一个full来存放，如果我们想要直接在FILES_STORE下存放，则需要自定义存放路径。</span></span><br><span class="line"><span class="string">        默认下载的是无后缀的文件，需要增加.mp3后缀</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :param response:</span></span><br><span class="line"><span class="string">        :param info:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        file_name = request.meta[<span class="string">'item'</span>][<span class="string">'word'</span>] + <span class="string">".mp3"</span></span><br><span class="line">        <span class="keyword">return</span> file_name</span><br></pre></td></tr></table></figure></p><p>需要更改settings.py文件，配置Mp3Pipeline，后面的300为优先级，数字越大，优先级越低。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configure item pipelines</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="comment"># 'youdaoeng.pipelines.YoudaoengPipeline': 300,</span></span><br><span class="line">    <span class="string">'youdaoeng.pipelines.Mp3Pipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youdaoeng&gt;scrapy crawl EngSpider -o data1.json</span><br></pre></td></tr></table></figure></p><p>等待运行完成，则在项目目录下生成了data1.json，并在D:\scrapy_files\目录下生成了我们爬取的三个单词的释义。</p><p><a href="https://github.com/luohongxfb/Example_Spiders/tree/master/youdaoeng" target="_blank" rel="noopener">项目源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;熟悉Scrapy框架后，我们手写第一个爬虫，爬取有道翻译的单词发音，发音文件链接，释义，例句。&lt;/p&gt;
&lt;p id=&quot;div-border-left-yellow&quot;&gt;需要先熟悉Scrapy框架的同学：&lt;a href=&quot;../../Scrapy详解-爬虫框架入门看这一篇就够了！/&quot;&gt;点击学习&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如单词&lt;code&gt;proportion&lt;/code&gt;：有道翻译的详情连接为 &lt;a href=&quot;http://dict.youdao.com/w/eng/proportion&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://dict.youdao.com/w/eng/proportion&lt;/a&gt; 。本篇文章爬取的内容结果：&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;example&quot;&lt;/span&gt;: [&amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;en&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;I seemed to have lost all sense of proportion.&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;&quot;zh&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;我好象已经丧失了有关比例的一切感觉。&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;en&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;The price of this article is out of(all) proportion to its value.&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;&quot;zh&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;这个商品的价格与它的价值完全不成比例。&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;en&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;But, the use of interception bases on the violation of the citizen rights, so it should be satisfactory of the principle of legal reservation and the principle of proportion.&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;attr&quot;&gt;&quot;zh&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;但是，监听的适用是以侵害公民权利为前提的，因此监听在刑事侦查中的运用必须满足法律保留原则和比例原则的要求。&quot;&lt;/span&gt;&amp;#125;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attr&quot;&gt;&quot;explain&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;n. 比例，占比；部分；面积；均衡&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;vt. 使成比例；使均衡；分摊&quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attr&quot;&gt;&quot;pron&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;[prə&#39;pɔːʃ(ə)n]&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attr&quot;&gt;&quot;pron_url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://dict.youdao.com/dictvoice?audio=proportion&amp;amp;type=1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attr&quot;&gt;&quot;word&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;proportion&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="https://sunflowercoder.com/categories/Scrapy/"/>
    
    
  </entry>
  
  <entry>
    <title>Scrapy 爬取七麦 app数据排行榜</title>
    <link href="https://sunflowercoder.com/Scrapy-%E7%88%AC%E5%8F%96%E4%B8%83%E9%BA%A6-app%E6%95%B0%E6%8D%AE%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    <id>https://sunflowercoder.com/Scrapy-爬取七麦-app数据排行榜/</id>
    <published>2019-07-16T09:38:04.000Z</published>
    <updated>2019-08-07T03:34:49.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>熟悉Scrapy之后，本篇文章带大家爬取七麦数据（<a href="https://www.qimai.cn/rank" target="_blank" rel="noopener">https://www.qimai.cn/rank</a> ）的ios appstore付费应用排行榜前100名应用。</p><p>爬取内容包括app在列表中的下标，app图标地址，app的名称信息，app的类型，在分类中的排行，开发者，详情等。</p><p>考虑的问题：</p><ul><li>Forbidden by robots.txt的错误</li><li>网页返回403</li><li>页面通过动态渲染，普通的请求url，在页面渲染之前已经返回response，解析没有数据</li><li>列表一页20个app，想要拿到前100个需要翻页，但是翻页没有更改url，而是通过js动态加载</li><li>…</li></ul><p id="div-border-left-yellow">需要先熟悉Scrapy框架的同学：<a href="../../Scrapy详解-爬虫框架入门看这一篇就够了！/">点击学习</a></p><a id="more"></a><img src="/Scrapy-爬取七麦-app数据排行榜/1563269958.jpg" title="七麦数据"><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>在需要放置项目的目录下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; scrapy startproject qimairank</span><br></pre></td></tr></table></figure></p><p>回车即可创建默认的Scrapy项目架构。</p><img src="/Scrapy-爬取七麦-app数据排行榜/1563271101.jpg" title="qimairank 项目目录"><h2 id="创建Item"><a href="#创建Item" class="headerlink" title="创建Item"></a>创建Item</h2><p>创建Item来存储我们爬取的app在列表中的下标，app图标地址，app的名称信息，app的类型，在分类中的排行，开发者，详情。<br>修改<code>items.py</code>，在下面增加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RankItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># 下标</span></span><br><span class="line">    index = scrapy.Field()</span><br><span class="line">    <span class="comment"># 图标地址</span></span><br><span class="line">    src = scrapy.Field()</span><br><span class="line">    <span class="comment"># app标题信息</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    <span class="comment"># app类型</span></span><br><span class="line">    type = scrapy.Field()</span><br><span class="line">    <span class="comment"># 分类中的排行</span></span><br><span class="line">    type_rank = scrapy.Field()</span><br><span class="line">    <span class="comment"># 开发者</span></span><br><span class="line">    company = scrapy.Field()</span><br><span class="line">    <span class="comment"># 详情信息</span></span><br><span class="line">    info = scrapy.Field()</span><br></pre></td></tr></table></figure></p><h2 id="创建Spider"><a href="#创建Spider" class="headerlink" title="创建Spider"></a>创建Spider</h2><p>在<code>spiders</code>目录下创建<code>RankSpider.py</code>，并创建<code>class RankSpider</code>，继承于scrapy.Spider。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RankSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"RankSpider"</span></span><br><span class="line">    start_urls = [<span class="string">"https://www.qimai.cn/rank"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">       <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><ul><li><code>name</code>：用于区别Spider，该名字必须是唯一的。</li><li><code>start_urls</code>：Spider在启动时进行爬取的url列表，首先会爬取第一个。</li><li><code>def parse(self, response)</code>：得到url的response信息后的解析方法。</li></ul><h2 id="解析付费榜"><a href="#解析付费榜" class="headerlink" title="解析付费榜"></a>解析付费榜</h2><p>解析用的Selectors选择器有多种方法：</p><ul><li>xpath(): 传入xpath表达式，返回该表达式所对应的所有节点的selector list列表 。</li><li>css(): 传入CSS表达式，返回该表达式所对应的所有节点的selector list列表.</li><li>extract(): 序列化该节点为unicode字符串并返回list。</li><li>re(): 根据传入的正则表达式对数据进行提取，返回unicode字符串list列表。</li></ul><p>下面我们用xpath()选择节点，xpath的语法可参考w3c的<a href="http://www.w3school.com.cn/xpath/xpath_nodes.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/xpath/xpath_nodes.asp</a> 学习，需要熟悉语法、运算符、函数等。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    base = response.xpath(</span><br><span class="line">        <span class="string">"//div[@class='ivu-row rank-all-item']/div[@class='ivu-col ivu-col-span-8'][2]//ul/li[@class='child-item']/div[@class='ivu-row']"</span>)</span><br><span class="line">    <span class="keyword">for</span> box <span class="keyword">in</span> base:</span><br><span class="line">        <span class="comment"># 创建实例</span></span><br><span class="line">        rankItem = RankItem()</span><br><span class="line">        <span class="comment"># 下标</span></span><br><span class="line">        rankItem[<span class="string">'index'</span>] = \</span><br><span class="line">            box.xpath(<span class="string">".//div[@class='ivu-col ivu-col-span-3 left-item']/span/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 图标地址</span></span><br><span class="line">        rankItem[<span class="string">'src'</span>] = box.xpath(<span class="string">".//img/@src"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># app名称信息</span></span><br><span class="line">        rankItem[<span class="string">'title'</span>] = box.xpath(<span class="string">".//div[@class='info-content']//a/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># app类型</span></span><br><span class="line">        rankItem[<span class="string">'type'</span>] = box.xpath(<span class="string">".//div[@class='info-content']//p[@class='small-txt']/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 分类中的排行</span></span><br><span class="line">        rankItem[<span class="string">'type_rank'</span>] = box.xpath(</span><br><span class="line">            <span class="string">".//div[@class='info-content']//p[@class='small-txt']//span[@class='rank-item']/text()"</span>).extract()[</span><br><span class="line">            <span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 开发者</span></span><br><span class="line">        rankItem[<span class="string">'company'</span>] = box.xpath(</span><br><span class="line">            <span class="string">".//div[@class='info-content']//p[@class='small-txt']//span[@class='company-item']/text()"</span>).extract()[</span><br><span class="line">            <span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 详情页地址</span></span><br><span class="line">        infoUrl = <span class="string">"https://www.qimai.cn"</span> + box.xpath(<span class="string">".//div[@class='info-content']//a/@href"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">yield</span> rankItem</span><br></pre></td></tr></table></figure></p><h2 id="运行爬取初始app列表"><a href="#运行爬取初始app列表" class="headerlink" title="运行爬取初始app列表"></a>运行爬取初始app列表</h2><p>直接运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qimairank&gt;scrapy crawl RankSpider -o data.json</span><br></pre></td></tr></table></figure></p><p>你会发现窗口没有item输出，data.json中也没有数据，是我们写错了吗？</p><img src="/Scrapy-爬取七麦-app数据排行榜/1563358018.jpg" title="robots报错"><p>scrapy默认遵守robot协议的，在访问网址前会先访问robot.txt来查看自己是否有权限访问。如果网站不允许被爬，就不能访问。<br>怎么样不遵守协议呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">settings.py</span><br><span class="line"></span><br><span class="line"># Obey robots.txt rules</span><br><span class="line">ROBOTSTXT_OBEY = False</span><br></pre></td></tr></table></figure></p><p>再次运行仍然失败，我们来看下具体原因：<br><img src="/Scrapy-爬取七麦-app数据排行榜/1563358364.jpg" title="HTTP status code报错"><br>因为七麦网站对请求的<code>User-Agent</code>做了校验，解决办法是在配置文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">settings.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable or disable downloader middlewares</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="comment">#    'qimairank.middlewares.QimairankDownloaderMiddleware': 543,</span></span><br><span class="line">    <span class="string">'qimairank.middlewares.RandomUserAgent'</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>并在<code>middlewares.py</code>中创建<code>RandomUserAgent</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    随机获取settings.py中配置的USER_AGENTS设置'User-Agent'</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, agents)</span>:</span></span><br><span class="line">        self.agents = agents</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(crawler.settings.getlist(<span class="string">'USER_AGENTS'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        request.headers.setdefault(<span class="string">'User-Agent'</span>, random.choice(self.agents))</span><br></pre></td></tr></table></figure></p><p>再次运行，没有报错，但是没有数据，是我们的xpath写错啦？我们在parse中增加输出body的信息</p><img src="/Scrapy-爬取七麦-app数据排行榜/1563428566.jpg" title="body为空"><p>可以看到body为空，没有我们需要的列表数据，这是因为七麦数据是通过js动态渲染的，在渲染完成前，我们的response已经返回，那么怎么样才能等一等呀，等到渲染完成才返回呢？</p><p>爬取动态渲染的方式，我知道是通过Splash或者Selenium，像我们的桌面版系统可以选择用Selenium，操作可以设置可视化，所有界面操作都能看见，Splash依赖于Docker，无界面。</p><p>安装Selenium包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure></p><p>使用前需要安装驱动，<a href="../../Scrapy-Selenium爬取动态渲染网站">配置详情点击</a></p><p>驱动安装完成，在middlewares.py中创建 SeleniumMiddleware<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeleniumMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.timeout = <span class="number">50</span></span><br><span class="line">        <span class="comment"># 2.Firefox---------------------------------</span></span><br><span class="line">        <span class="comment"># 实例化参数对象</span></span><br><span class="line">        options = webdriver.FirefoxOptions()</span><br><span class="line">        <span class="comment"># 无界面</span></span><br><span class="line">        <span class="comment"># options.add_argument('--headless')</span></span><br><span class="line">        <span class="comment"># 关闭浏览器弹窗</span></span><br><span class="line">        options.set_preference(<span class="string">'dom.webnotifications.enabled'</span>, <span class="literal">False</span>)</span><br><span class="line">        options.set_preference(<span class="string">'dom.push.enabled'</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 打开浏览器</span></span><br><span class="line">        self.browser = webdriver.Firefox(firefox_options=options)</span><br><span class="line">        <span class="comment"># 指定浏览器窗口大小</span></span><br><span class="line">        self.browser.set_window_size(<span class="number">1400</span>, <span class="number">700</span>)</span><br><span class="line">        <span class="comment"># 设置页面加载超时时间</span></span><br><span class="line">        self.browser.set_page_load_timeout(self.timeout)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, self.timeout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="comment"># 当请求的页面不是当前页面时</span></span><br><span class="line">        <span class="keyword">if</span> self.browser.current_url != request.url:</span><br><span class="line">            <span class="comment"># 获取页面</span></span><br><span class="line">            self.browser.get(request.url)</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># 返回页面的response</span></span><br><span class="line">        <span class="keyword">return</span> HtmlResponse(url=self.browser.current_url, body=self.browser.page_source,</span><br><span class="line">                            encoding=<span class="string">"utf-8"</span>, request=request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_closed</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 爬虫结束 关闭窗口</span></span><br><span class="line">        self.browser.close()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="comment"># 设置爬虫结束的回调监听</span></span><br><span class="line">        s = cls()</span><br><span class="line">        crawler.signals.connect(s.spider_closed, signal=signals.spider_closed)</span><br><span class="line">        <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure></p><p>在settins.py中配置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable or disable downloader middlewares</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="comment">#    'qimairank.middlewares.QimairankDownloaderMiddleware': 543,</span></span><br><span class="line">    <span class="string">'qimairank.middlewares.RandomUserAgent'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'qimairank.middlewares.SeleniumMiddleware'</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再次运行<code>scrapy crawl RankSpider -o data.json</code>，啦啦啦~这回有数据啦。</p><h2 id="Selenium调用JS脚本"><a href="#Selenium调用JS脚本" class="headerlink" title="Selenium调用JS脚本"></a>Selenium调用JS脚本</h2><p>观察爬取出来的data.json，发现怎么肥四，只有20条数据，而且除了前6个的app图标都是七麦的默认图标。</p><img src="/Scrapy-爬取七麦-app数据排行榜/1563434696.jpg" title="1563434696.jpg"><p>这是因为七麦数据的列表默认每页20条，而且默认渲染前6个的图标，其余的页需要触发滑动事件加载，而且滑动到的图标才开始渲染。这样怎么办呢？我们只需要滑动到可以加载的按钮就可以啦，检查发现在三个列表的外层标签有一个class为cm-explain-bottom的标签<br><img src="/Scrapy-爬取七麦-app数据排行榜/1563442615.jpg" title="1563442615.jpg"><br>我们用Selenium调用js脚本，滑动到这个标签就可以啦，在中间件process_request方法更改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">    <span class="comment"># 当请求的页面不是当前页面时</span></span><br><span class="line">    <span class="keyword">if</span> self.browser.current_url != request.url:</span><br><span class="line">        <span class="comment"># 获取页面</span></span><br><span class="line">        self.browser.get(request.url)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 请求的url开始为https://www.qimai.cn/rank/时，调用滑动界面，每页20个，滑动4次</span></span><br><span class="line">        <span class="keyword">if</span> request.url.startswith(<span class="string">"https://www.qimai.cn/rank"</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line">                    self.browser.execute_script(</span><br><span class="line">                        <span class="string">"document.getElementsByClassName('cm-explain-bottom')[0].scrollIntoView(true)"</span>)</span><br><span class="line">                    time.sleep(<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">except</span> JavascriptException <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>再次执行<code>scrapy crawl RankSpider -o data1.json</code>，则可看见已经生成data1.json里面有100个item。</p><h2 id="获取app详情"><a href="#获取app详情" class="headerlink" title="获取app详情"></a>获取app详情</h2><p>详情页需要跟进url，我们在RankSpider#parse方法中，不用yield Item，而是yield Request就可以跟进。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 详情页地址</span></span><br><span class="line">infoUrl = <span class="string">"https://www.qimai.cn"</span> + box.xpath(<span class="string">".//div[@class='info-content']//a/@href"</span>).extract()[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># yield rankItem</span></span><br><span class="line"><span class="keyword">yield</span> Request(infoUrl.replace(<span class="string">"rank"</span>, <span class="string">"baseinfo"</span>), self.parseInfo,</span><br><span class="line">              meta=&#123;<span class="string">'rankItem'</span>: dict(rankItem).copy()&#125;, dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><p>解析的infoUrl替换”rank”字符串为”baseinfo”就可以访问app应用信息页，用meta传递item到下一个解析方法中，用软拷贝的方式，避免Item因为地址相同，内容覆盖。</p><p>self.parseInfo为指定这次请求的解析方法，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseInfo</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    print(<span class="string">"基地址："</span> + response.url)</span><br><span class="line">    <span class="keyword">if</span> response.status != <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    rankItem = response.meta[<span class="string">'rankItem'</span>]</span><br><span class="line"></span><br><span class="line">    info = dict()</span><br><span class="line">    base = response.xpath(<span class="string">"//div[@id='app-container']"</span>)</span><br><span class="line">    <span class="keyword">if</span> base.extract():</span><br><span class="line">        <span class="comment"># try:</span></span><br><span class="line">        <span class="comment"># 描述</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            info[<span class="string">'desc'</span>] = base.xpath(</span><br><span class="line">                <span class="string">".//div[@class='app-header']//div[@class='app-subtitle']/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"无描述"</span>)</span><br><span class="line">        <span class="comment"># 开发商</span></span><br><span class="line">        info[<span class="string">'auther'</span>] = base.xpath(</span><br><span class="line">            <span class="string">".//div[@class='app-header']//div[@class='auther']//div[@class='value']/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 分类</span></span><br><span class="line">        info[<span class="string">'classify'</span>] = base.xpath(</span><br><span class="line">            <span class="string">".//div[@class='app-header']//div[@class='genre']//div[@class='value']/a/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># appid</span></span><br><span class="line">        info[<span class="string">'appid'</span>] = base.xpath(</span><br><span class="line">            <span class="string">".//div[@class='app-header']//div[@class='appid']//div[@class='value']/a/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># appstore地址</span></span><br><span class="line">        info[<span class="string">'appstorelink'</span>] = base.xpath(</span><br><span class="line">            <span class="string">".//div[@class='app-header']//div[@class='appid']//div[@class='value']/a/@href"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 价格</span></span><br><span class="line">        info[<span class="string">'price'</span>] = base.xpath(</span><br><span class="line">            <span class="string">".//div[@class='app-header']//div[@class='price']//div[@class='value']/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 最新版本</span></span><br><span class="line">        info[<span class="string">'version'</span>] = base.xpath(</span><br><span class="line">            <span class="string">".//div[@class='app-header']//div[@class='version']//div[@class='value']/text()"</span>).extract()[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 应用截图</span></span><br><span class="line">        info[<span class="string">'screenshot'</span>] = base.xpath(</span><br><span class="line">            <span class="string">".//div[@class='router-wrapper']//div[@class='app-screenshot']//div[@class='screenshot-box']//img/@src"</span>).extract()</span><br><span class="line">        <span class="comment"># 应用描述</span></span><br><span class="line">        info[<span class="string">'desc'</span>] = base.xpath(</span><br><span class="line">            <span class="string">".//div[@class='router-wrapper']//div[@class='app-describe']//div[@class='description']"</span>).extract()[</span><br><span class="line">            <span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 应用基本信息</span></span><br><span class="line">        info[<span class="string">'baseinfo'</span>] = []</span><br><span class="line">        <span class="keyword">for</span> infoBase <span class="keyword">in</span> base.xpath(</span><br><span class="line">                <span class="string">".//div[@class='router-wrapper']//div[@class='app-baseinfo']//ul[@class='baseinfo-list']/li"</span>):</span><br><span class="line">            <span class="comment"># print(info['baseinfo'])</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                info[<span class="string">'baseinfo'</span>].append(dict(type=infoBase.xpath(<span class="string">".//*[@class='type']/text()"</span>).extract()[<span class="number">0</span>],</span><br><span class="line">                                             info=infoBase.xpath(<span class="string">".//*[@class='info-txt']/text()"</span>).extract()[<span class="number">0</span>]))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        rankItem[<span class="string">'info'</span>] = info</span><br><span class="line">        <span class="comment"># 替换图标 列表加载为默认图标</span></span><br><span class="line">        rankItem[<span class="string">'src'</span>] = \</span><br><span class="line">            response.xpath(<span class="string">"//*[@id='app-side-bar']//div[@class='logo-wrap']/img/@src"</span>).extract()[</span><br><span class="line">                <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">yield</span> rankItem</span><br></pre></td></tr></table></figure></p><p>再次执行<code>scrapy crawl RankSpider -o data1.json</code>，则可看见已经生成data2.json，但是生成的列表不是排行的列表，甚至是乱序的，原因是因为我们使用了url跟进返回，每个页面的请求返回的速度不一样，需要排序的话就写个小脚本按照index排个序。</p><p><a href="https://github.com/luohongxfb/Example_Spiders/tree/master/qimairank" target="_blank" rel="noopener">项目源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;熟悉Scrapy之后，本篇文章带大家爬取七麦数据（&lt;a href=&quot;https://www.qimai.cn/rank&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.qimai.cn/rank&lt;/a&gt; ）的ios appstore付费应用排行榜前100名应用。&lt;/p&gt;
&lt;p&gt;爬取内容包括app在列表中的下标，app图标地址，app的名称信息，app的类型，在分类中的排行，开发者，详情等。&lt;/p&gt;
&lt;p&gt;考虑的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forbidden by robots.txt的错误&lt;/li&gt;
&lt;li&gt;网页返回403&lt;/li&gt;
&lt;li&gt;页面通过动态渲染，普通的请求url，在页面渲染之前已经返回response，解析没有数据&lt;/li&gt;
&lt;li&gt;列表一页20个app，想要拿到前100个需要翻页，但是翻页没有更改url，而是通过js动态加载&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p id=&quot;div-border-left-yellow&quot;&gt;需要先熟悉Scrapy框架的同学：&lt;a href=&quot;../../Scrapy详解-爬虫框架入门看这一篇就够了！/&quot;&gt;点击学习&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="https://sunflowercoder.com/categories/Scrapy/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo--第二弹</title>
    <link href="https://sunflowercoder.com/Hexo-%E7%AC%AC%E4%BA%8C%E5%BC%B9/"/>
    <id>https://sunflowercoder.com/Hexo-第二弹/</id>
    <published>2019-07-10T08:00:09.000Z</published>
    <updated>2019-07-15T10:02:48.486Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录</strong></p><ul><li><a href="#Hexo支持流程图、时序图">1. Hexo支持流程图、时序图</a></li><li><a href="#Hexo多行代码提供复制">2. Hexo多行代码提供复制</a></li><li><a href="#Hexo复制时追加版权">3. Hexo复制时追加版权</a></li></ul><h2 id="Hexo支持流程图、时序图"><a href="#Hexo支持流程图、时序图" class="headerlink" title="Hexo支持流程图、时序图"></a>Hexo支持流程图、时序图</h2><p>画流程图还需要用别的编辑器画了用图片导入？Hexo实现手写流程图也很简单哦，但是有个小坑，小编被坑了好久，接下来手把手👇带你们过坑。</p><p>markdown语法实现流程图的方式可以通过mermaid或flowchart，时序图则可以mermaid或sequence，但是默认是不会识别语法的，只是当做普通的多行代码，需要安装插件。</p><a id="more"></a>  <h3 id="方式一：mermaid"><a href="#方式一：mermaid" class="headerlink" title="方式一：mermaid"></a>方式一：mermaid</h3><p>支持流程图（graph）、时序图（sequenceDiagram）、甘特图（gantt），可以说支持很多了。配置教方式二麻烦一点。</p><p id="div-border-left-yellow">在线编辑器地址：<a href="https://mermaidjs.github.io/mermaid-live-editor/" target="_blank" rel="noopener">https://mermaidjs.github.io/mermaid-live-editor/</a> ，可以利用在线编辑器编辑完流程图之后，下载SVG或者直接link。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>官方说的是通过yarn安装（如果没有安装yarn，使用<code>npm install -g yarn</code>安装）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure></p><p>也可以使用npm：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure></p><p><a href="https://www.npmjs.com/package/hexo-filter-mermaid-diagrams" target="_blank" rel="noopener">插件的官方网址</a></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>（1）修改<span id="inline-green">站点配置文件_config.yml</span><br>在最后加入<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mermaid chart </span></span><br><span class="line"><span class="attr">mermaid:</span> <span class="comment">## mermaid url https://github.com/knsv/mermaid </span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>  <span class="comment"># default true </span></span><br><span class="line"><span class="attr">  version:</span> <span class="string">"7.1.2"</span> <span class="comment"># default v7.1.2 </span></span><br><span class="line"><span class="attr">  options:</span>  <span class="comment"># find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js </span></span><br><span class="line">    <span class="comment">#startOnload: true  // default true</span></span><br></pre></td></tr></table></figure></p><p>（2）Next主题更改：在themes/next/_partials/footer.swig 最后加入<br><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.mermaid.enable %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'https://unpkg.com/mermaid@</span></span></span><span class="template-variable">&#123;&#123; theme.mermaid.version &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/dist/mermaid.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    if (window.mermaid) &#123;</span></span><br><span class="line"><span class="xml">      mermaid.initialize(&#123;theme: 'default'&#125;);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><p>主题可更改，包含 default | forest</p><p>重新<code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server --debug</code>启动渲染也生效了。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>1. 流程图示例</strong></p><blockquote><p>```mermaid<br>graph TB<br>    start(开始)–&gt;inputA[输入用户名密码]<br>    inputA–&gt;opA{数据库查询子类}<br>    opA–&gt;conditionA{是否有此用户}<br>    conditionA–yes–&gt;conditionB{密码是否正确}<br>    conditionA–no–&gt;inputA<br>    conditionB–yes–&gt;opB[读入用户信息]<br>    conditionB–no–&gt;inputA<br>    opB–&gt;en(登录)<br> ```</p></blockquote><p>mermaid流程图展示：</p><pre class="mermaid">graph TB    start(开始)-->inputA[输入用户名密码]    inputA-->opA{数据库查询子类}    opA-->conditionA{是否有此用户}    conditionA--yes-->conditionB{密码是否正确}    conditionA--no-->inputA    conditionB--yes-->opB[读入用户信息]    conditionB--no-->inputA    opB-->en(登录)</pre><p><strong>2. 时序图示例</strong></p><blockquote><p>```mermaid<br>sequenceDiagram<br>participant Client<br>participant Server</p><p>Note left of Client:SYN_SENT<br>Client-&gt;Server:SYN=1 seq=x<br>Note right of Server:SYN_RCVD<br>Server-&gt;Client:SYN=1 seq=y ACK=x+1<br>Note left of Client:ESTABLISHED<br>Client-&gt;Server:ACK=y+1<br>Note right of Server:ESTABLISHED<br>```</p></blockquote><p>mermaid时序图展示：</p><pre class="mermaid">sequenceDiagramparticipant Clientparticipant ServerNote left of Client:SYN_SENTClient->Server:SYN=1 seq=xNote right of Server:SYN_RCVDServer->Client:SYN=1 seq=y ACK=x+1Note left of Client:ESTABLISHEDClient->Server:ACK=y+1Note right of Server:ESTABLISHED</pre><h4 id="要说的话"><a href="#要说的话" class="headerlink" title="要说的话"></a>要说的话</h4><p>mermaid帮助文档：<a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">https://mermaidjs.github.io/</a> ，可在里面查看更多的使用介绍及语法。</p><p><strong>优点</strong>：颜色鲜艳；语法结构简单，不需要先声明；方向可指定；灵活，可以更改样式。</p><p><strong>缺点</strong>：方块模式提供没有标准流程图的规范的形状，比如输入框的平行四边形是没有的，需要自定义；加载渲染较慢，会出现展示多行代码样式。<br>···mermaid<br>graph LR<br>id1&gt;id1]–&gt;id2[id2]<br>id2—id3(id3)<br>id3—|text|id4((id4))<br>id4–&gt;|text|id5{id5}</p><p>style id1 fill:#f9f,stroke:#333,stroke-width:4px<br>style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5<br>···</p><pre class="mermaid">graph LRid1>id1]-->id2[id2]id2---id3(id3)id3---|text|id4((id4))id4-->|text|id5{id5}style id1 fill:#f9f,stroke:#333,stroke-width:4pxstyle id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5</pre><p>更多流程图使用查看：<a href="https://mermaidjs.github.io/flowchart.html" target="_blank" rel="noopener">https://mermaidjs.github.io/flowchart.html</a></p><p>流程图过长会占用界面大部分空间，博客中设置了最大高度，及居中展示，在themes/next/source/css/_custom/custom.styl下面加入<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*mermaid图居中*/</span></span><br><span class="line"><span class="selector-class">.mermaid</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方式二：flowchart-sequence"><a href="#方式二：flowchart-sequence" class="headerlink" title="方式二：flowchart+sequence"></a>方式二：flowchart+sequence</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>支持流程图，安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure></p><p>支持时序图，安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-filter-sequence</span><br></pre></td></tr></table></figure></p><h4 id="配置（非必须）"><a href="#配置（非必须）" class="headerlink" title="配置（非必须）"></a>配置（非必须）</h4><p>插件官方地址： <a href="https://github.com/bubkoo/hexo-filter-flowchart" target="_blank" rel="noopener">flowchart</a>  <a href="https://github.com/bubkoo/hexo-filter-sequence" target="_blank" rel="noopener">sequence</a></p><p>官方配置提到需要更改<span id="inline-green">站点配置文件_config.yml</span>，增加：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flowchart:</span></span><br><span class="line">  <span class="comment"># raphael:   # optional, the source url of raphael.js</span></span><br><span class="line">  <span class="comment"># flowchart: # optional, the source url of flowchart.js</span></span><br><span class="line"><span class="attr">  options:</span> <span class="comment"># options used for `drawSVG`</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">sequence:</span></span><br><span class="line">  <span class="comment"># webfont:     # optional, the source url of webfontloader.js</span></span><br><span class="line">  <span class="comment"># snap:        # optional, the source url of snap.svg.js</span></span><br><span class="line">  <span class="comment"># underscore:  # optional, the source url of underscore.js</span></span><br><span class="line">  <span class="comment"># sequence:    # optional, the source url of sequence-diagram.js</span></span><br><span class="line">  <span class="comment"># css: # optional, the url for css, such as hand drawn theme </span></span><br><span class="line"><span class="attr">  options:</span> </span><br><span class="line"><span class="attr">    theme:</span> </span><br><span class="line"><span class="attr">    css_class:</span></span><br></pre></td></tr></table></figure></p><p>亲测不配置也是可以的。<br><code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server --debug</code>启动渲染也生效了。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><strong>1.流程图示例</strong></p><blockquote><p>```flow<br>st=&gt;start: 开始<br>inputA=&gt;inputoutput: 输入用户名密码<br>opA=&gt;operation: 数据库查询子类<br>conditionA=&gt;condition: 是否有此用户<br>conditionB=&gt;condition: 密码是否正确<br>opB=&gt;operation: 读入用户信息<br>e=&gt;end: 登录<br>st-&gt;inputA-&gt;opA-&gt;conditionA<br>conditionA(yes)-&gt;conditionB<br>conditionA(no)-&gt;inputA<br>conditionB(yes)-&gt;opB-&gt;e<br>conditionB(no)-&gt;inputA<br>```</p></blockquote><p>flowchart流程图展示：</p><div id="flowchart-0" class="flow-chart"></div><p><strong>2.时序图示例</strong></p><blockquote><p>```sequence<br>participant Client<br>participant Server</p><p>Note left of Client:SYN_SENT<br>Client-&gt;Server:SYN=1 seq=x<br>Note right of Server:SYN_RCVD<br>Server-&gt;Client:SYN=1 seq=y ACK=x+1<br>Note left of Client:ESTABLISHED<br>Client-&gt;Server:ACK=y+1<br>Note right of Server:ESTABLISHED<br>```</p></blockquote><p>sequence时序图展示：</p><p><div id="sequence-0" class="sequence"></div></p><h4 id="要说的话-1"><a href="#要说的话-1" class="headerlink" title="要说的话"></a>要说的话</h4><p><strong>优点</strong>：标准流程图的样式展示；渲染快，几乎不会出现展示多行代码的时候；实现简单。</p><p><strong>缺点</strong>：样式不能更改，黑白界面；流程图语法需要先声明后使用。</p><p>设置最大高度及居中展示，背景色，超出部分滑动：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flow-chart</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sequence</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>sequence的小编不走心，没有提供class，需要在node_modules/hexo-filter-sequence/lib/renderer.js修改，大约22行，设置id的时候同时增加class：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> start + <span class="string">'&lt;div id="'</span> + seqId + <span class="string">'" class="sequence"&gt;&lt;/div&gt;'</span> + end;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>特别注意</strong>：很多人说sequence设置无效，需要更改依赖的snap为raphael，也有说更改站点配置文件的external_link为false，小编都试过了，无效。为啥子时序图还是失败了呢？小编搜了整个项目差点以为是跟motion.js里面的sequence重合有缺陷，都打算改插件了，然而并不需要！！<br>如果您的使用的Hexo，而且时序图放在md文件的最后一个，导致渲染失效了的话，请在文章的最后输入一个回车，没错就是只需要一个回车就解决了。。不知道是不是Hexo的bug，所有的多行代码在文章末尾的都会出现渲染问题，并不是sequence的问题。</p><h2 id="Hexo多行代码提供复制"><a href="#Hexo多行代码提供复制" class="headerlink" title="Hexo多行代码提供复制"></a>Hexo多行代码提供复制</h2><p>增加复制按钮及响应的js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">clipboard.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initCopyCode = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copyHtml = <span class="string">''</span>;</span><br><span class="line">    copyHtml += <span class="string">'&lt;button class="btn-copy" data-clipboard-snippet=""&gt;'</span>;</span><br><span class="line">    copyHtml += <span class="string">'  &lt;i class="fa fa-clipboard"&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;'</span>;</span><br><span class="line">    copyHtml += <span class="string">'&lt;/button&gt;'</span>;</span><br><span class="line">    $(<span class="string">".highlight .code pre"</span>).before(copyHtml);</span><br><span class="line">    <span class="keyword">new</span> ClipboardJS(<span class="string">'.btn-copy'</span>, &#123;</span><br><span class="line">      target: <span class="function"><span class="keyword">function</span> (<span class="params">trigger</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> trigger.nextElementSibling;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>资源下载：<a href="/download/Hexo-第二弹.zip">点击下载</a></p><p>下载完成后，将clipboard.js和clipboard-use.js放在 themes/next/source/js/src/下，并更改themes/next/layout/_layout.swig，在上面加入<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码块复制功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'/js/src/clipboard.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/clipboard-use.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样在鼠标在代码区域时右上角显示copy。</p><h2 id="Hexo复制时追加版权"><a href="#Hexo复制时追加版权" class="headerlink" title="Hexo复制时追加版权"></a>Hexo复制时追加版权</h2><p>虽然在<span id="inline-blue">主题配置文件_config.yml</span>中更改post_copyright可以在文章底部增加版权声明信息，复制时并不能像很多博客网站一样复制时直接追加。</p><p>实现是通过监听copy事件，追加信息：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">copyright.js</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.getElementsByClassName(<span class="string">"post-copyright"</span>).length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> author=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"author"</span>)[<span class="number">0</span>].textContent;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'copy'</span>, e =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> clipboardData = e.clipboardData || <span class="built_in">window</span>.clipboardData;</span><br><span class="line">      <span class="keyword">if</span>(!clipboardData) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      e.preventDefault();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> selection = <span class="built_in">window</span>.getSelection().toString();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> textData = selection + <span class="string">'\n-----------------------\n'</span></span><br><span class="line">        + (author ? <span class="string">`作者: <span class="subst">$&#123;author&#125;</span>\n`</span> : <span class="string">''</span>)</span><br><span class="line">        + <span class="string">'原文: '</span> + <span class="built_in">window</span>.location.href + <span class="string">'\n'</span></span><br><span class="line">        + <span class="string">'版权声明：本博客所有文章除特别声明外，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！\n\n'</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> htmlData = selection + <span class="string">'&lt;br/&gt;-----------------------&lt;br/&gt;'</span></span><br><span class="line">        + (author ? <span class="string">`&lt;b&gt;作者&lt;/b&gt;: <span class="subst">$&#123;author&#125;</span>&lt;br/&gt;`</span> : <span class="string">''</span>)</span><br><span class="line">        + <span class="string">`&lt;b&gt;原文&lt;/b&gt;: &lt;a href="<span class="subst">$&#123;<span class="built_in">window</span>.location.href&#125;</span>"&gt;<span class="subst">$&#123;<span class="built_in">window</span>.location.href&#125;</span>&lt;/a&gt;&lt;br/&gt;`</span></span><br><span class="line">        + <span class="string">'版权声明：本博客所有文章除特别声明外，均采用 &lt;a href="https://creativecommons.org/licenses/by-nc-sa/3.0/"&gt;CC BY-NC-SA 3.0&lt;/a&gt; 许可协议。转载请注明出处！&lt;br/&gt;'</span>;</span><br><span class="line"></span><br><span class="line">      clipboardData.setData(<span class="string">'text/html'</span>, htmlData);</span><br><span class="line">      clipboardData.setData(<span class="string">'text/plain'</span>, textData);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>资源下载：copyright.js <a href="/download/Hexo-第二弹.zip">点击下载</a><br>下载完成后，copyright.js放在 themes/next/source/js/src/下，并更改themes/next/layout/_layout.swig，在上面加入<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&#123;#复制版权申明#&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/copyright.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>版权开启时，复制时即可增加版权信息。</p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始inputA=>inputoutput: 输入用户名密码opA=>operation: 数据库查询子类conditionA=>condition: 是否有此用户conditionB=>condition: 密码是否正确opB=>operation: 读入用户信息e=>end: 登录st->inputA->opA->conditionAconditionA(yes)->conditionBconditionA(no)->inputAconditionB(yes)->opB->econditionB(no)->inputA</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">participant Clientparticipant ServerNote left of Client:SYN_SENTClient->Server:SYN=1 seq=xNote right of Server:SYN_RCVDServer->Client:SYN=1 seq=y ACK=x+1Note left of Client:ESTABLISHEDClient->Server:ACK=y+1Note right of Server:ESTABLISHED</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Hexo支持流程图、时序图&quot;&gt;1. Hexo支持流程图、时序图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Hexo多行代码提供复制&quot;&gt;2. Hexo多行代码提供复制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Hexo复制时追加版权&quot;&gt;3. Hexo复制时追加版权&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Hexo支持流程图、时序图&quot;&gt;&lt;a href=&quot;#Hexo支持流程图、时序图&quot; class=&quot;headerlink&quot; title=&quot;Hexo支持流程图、时序图&quot;&gt;&lt;/a&gt;Hexo支持流程图、时序图&lt;/h2&gt;&lt;p&gt;画流程图还需要用别的编辑器画了用图片导入？Hexo实现手写流程图也很简单哦，但是有个小坑，小编被坑了好久，接下来手把手👇带你们过坑。&lt;/p&gt;
&lt;p&gt;markdown语法实现流程图的方式可以通过mermaid或flowchart，时序图则可以mermaid或sequence，但是默认是不会识别语法的，只是当做普通的多行代码，需要安装插件。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://sunflowercoder.com/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Scrapy详解 爬虫框架入门看这一篇就够了！</title>
    <link href="https://sunflowercoder.com/Scrapy%E8%AF%A6%E8%A7%A3-%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86%EF%BC%81/"/>
    <id>https://sunflowercoder.com/Scrapy详解-爬虫框架入门看这一篇就够了！/</id>
    <published>2019-07-10T06:20:06.000Z</published>
    <updated>2019-08-07T03:31:35.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习Scrapy有一段时间了，当时想要获取一下百度汉字的解析，又不想一个个汉字去搜，复制粘贴太费劲，考虑到爬虫的便利性，这篇文章是介绍一个爬虫框架–<strong>Scrapy</strong>，非常主流的爬虫框架，写爬虫还不会Scrapy，你就out啦🙈~</p><p>🐞爬虫的应用场景：</p><ul><li>搜索多个汉字，存储下来汉字的解析</li><li>每隔一段时间获取一下最新天气，新闻等等</li><li>拿到豆瓣电影（豆瓣图书）的top100的电影名字、演员、上映时间以及各大网友的评论</li><li>需要下载网站的一系列图片，视频等，下载慕课网的课程视频</li><li>搜集安居客的所有房源，性价比分析</li><li>刷票、抢票</li><li>拿到微博当前的热门话题，自媒体需要即时写文章啦</li><li>…</li></ul><a id="more"></a>             <h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html" target="_blank" rel="noopener">官方解析</a>：Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。</p><p>其最初是为了页面抓取（更确切来说,网络抓取）所设计的，也可以应用在获取API所返回的数据或者通用的网络爬虫。</p><img src="/Scrapy详解-爬虫框架入门看这一篇就够了！/2351264496.png" title="Scrapy架构图"><p><strong>架构分析</strong>：</p><ul><li><code>Scrapy Engine</code>：Scrapy引擎。负责控制数据流在系统中所有组件中流动，并在相应动作发生时触发事件。</li><li><code>Scheduler</code>：调度器。从Scrapy Engine接受请求（requests）并排序列入队列，并在引擎再次请求时返回。用它来决定下一个抓取的网址是什么，同时去除重复的网址。</li><li><code>Downloader</code>：下载器。抓取网页并将网页内容返还给Spiders。建立在twisted异步模型。</li><li><code>Spiders</code>：爬虫。用户自定义的类，主要用来解析网页，提取Items，发送url跟进等新请求等。</li><li><code>Item Pipelines</code>：管道。主要用来处理Spider解析出来的Items，进行按规则过滤，验证，持久化存储（如数据库存储）等</li><li><code>Downloader Middlewares</code>：下载中间件。位于Scrapy Engine和Downloader之间，主要是处理Scrapy引擎与下载器之间的请求及响应。</li><li><code>Spider Middlewares</code>：爬虫中间件。位于Scrapy Engine和Spiders之间，主要工作是处理Spiders的响应输入和请求输出。</li><li><code>Scheduler Middlewares</code>：调度中间件。位于Scrapy Engine和Scheduler之间。主要工作是处理从Scrapy Engine发送到Scheduler的请求和响应。</li></ul><p><strong>数据处理流程</strong>：<br>1、引擎打开一个网站(open a domain)，找到处理该网站的Spider并向该Spider请求要爬取的第一个start_urls。<br>2、引擎从Spider中获取到第一个要爬取的URL并在调度器(Scheduler)以Request调度。<br>3、引擎向调度器请求下一个要爬取的URL。<br>4、调度器返回下一个要爬取的URL给引擎，引擎将URL通过<code>Downloader Middlewares</code>（request）转发给下载器(Downloader)。<br>5、一旦页面下载完毕，<code>Downloader</code>生成一个该页面的Response，并将其通过<code>Downloader Middlewares</code>(response)发送给引擎。<br>6、引擎从<code>Downloader</code>中接收到Response并通过<code>Spider Middlewares</code>（request）发送给Spider处理。<br>7、Spider处理Response并返回爬取到的Item及(跟进的)新的Request给引擎。<br>8、引擎将(Spider返回的)爬取到的Item给<code>Item Pipeline</code>，将(Spider返回的)Request给调度器。<br>9、系统重复2-9的操作，直到调度中没有更多地request，然后断开引擎与网站之间的联系。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>依赖环境：</p><ul><li>Python 2.7及以上</li><li>Python Package: pip and setuptools. 现在 pip 依赖 setuptools ，如果未安装，则会自动安装 setuptools 。</li></ul><p>使用pip安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Scrapy</span><br></pre></td></tr></table></figure></p><p>创建项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject [项目名]</span><br></pre></td></tr></table></figure></p><p>如创建 scrapy startproject qimairank，会自动创建Scrapy的项目架构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">qimairank</span><br><span class="line"></span><br><span class="line">|--qimairank</span><br><span class="line">    |--spiders</span><br><span class="line">        |--__init__.py</span><br><span class="line">    |--__init__.py</span><br><span class="line">    |--items.py</span><br><span class="line">    |--middlewares.py</span><br><span class="line">    |--pipelines.py</span><br><span class="line">    |--settings.py</span><br><span class="line">|--scrapy.cfg</span><br></pre></td></tr></table></figure></p><ul><li><code>scrapy.cfg</code>：项目的配置文件，指定<code>settings</code>文件，部署deploy的project名称等等。</li><li><code>qimairank</code>：项目的python模块。</li><li><code>spiders</code>：放置spider代码的目录。</li><li><code>items.py</code>：项目中的item文件。</li><li><code>pipelines.py</code>:项目中的pipelines文件。</li><li><code>middlewares.py</code>：项目的中间件。</li><li><code>settings.py</code>：Scrapy 配置文件。更多配置信息查看：<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/settings.html" target="_blank" rel="noopener">https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/settings.html</a></li></ul><h2 id="第一个爬虫"><a href="#第一个爬虫" class="headerlink" title="第一个爬虫"></a>第一个爬虫</h2><p>爬虫实现讲解：</p><p>第一弹：爬取有道翻译 <a href="../../Scrapy-爬取有道翻译的单词释义/">👉 点击前往</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习Scrapy有一段时间了，当时想要获取一下百度汉字的解析，又不想一个个汉字去搜，复制粘贴太费劲，考虑到爬虫的便利性，这篇文章是介绍一个爬虫框架–&lt;strong&gt;Scrapy&lt;/strong&gt;，非常主流的爬虫框架，写爬虫还不会Scrapy，你就out啦🙈~&lt;/p&gt;
&lt;p&gt;🐞爬虫的应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索多个汉字，存储下来汉字的解析&lt;/li&gt;
&lt;li&gt;每隔一段时间获取一下最新天气，新闻等等&lt;/li&gt;
&lt;li&gt;拿到豆瓣电影（豆瓣图书）的top100的电影名字、演员、上映时间以及各大网友的评论&lt;/li&gt;
&lt;li&gt;需要下载网站的一系列图片，视频等，下载慕课网的课程视频&lt;/li&gt;
&lt;li&gt;搜集安居客的所有房源，性价比分析&lt;/li&gt;
&lt;li&gt;刷票、抢票&lt;/li&gt;
&lt;li&gt;拿到微博当前的热门话题，自媒体需要即时写文章啦&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="https://sunflowercoder.com/categories/Scrapy/"/>
    
    
  </entry>
  
  <entry>
    <title>排除aar/jar中冗余或者冲突包、类的脚本</title>
    <link href="https://sunflowercoder.com/%E6%8E%92%E9%99%A4aar-jar%E4%B8%AD%E5%86%97%E4%BD%99%E6%88%96%E8%80%85%E5%86%B2%E7%AA%81%E5%8C%85%E3%80%81%E7%B1%BB%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>https://sunflowercoder.com/排除aar-jar中冗余或者冲突包、类的脚本/</id>
    <published>2019-07-05T08:51:49.000Z</published>
    <updated>2019-07-05T08:55:19.668Z</updated>
    
    <content type="html"><![CDATA[<p>引入aar的冲突无所不在，通过远程依赖maven的包可以通过<code>exclude</code>关键字搭配<code>module</code>和<code>group</code>去除某个组，没办法去除具体的类。</p><p>那么如果是单独的aar包，想要排除aar下classes.jar包里的某个单独的包或者类怎么办？</p><p>需要接入的jar包已经带了腾讯X5核心，当前依赖的已经包含X5核心，冲突又该如何解决呢？</p><p>当前的gradle脚本（项目链接：<a href="https://github.com/luohongxfb/ExcludeAar" target="_blank" rel="noopener">https://github.com/luohongxfb/ExcludeAar</a> ）可以解决。</p><a id="more"></a><ul><li><strong>目录</strong><ul><li><a href="#1-效果展示"> 1 效果展示</a></li><li><a href="#2-如何使用"> 2 如何使用</a></li><li><a href="#3-如何实现的"> 3 如何实现的</a><ul><li><a href="#解压aarjar包"> 解压AAR/JAR包</a></li><li><a href="#按照排除规则对解压的jar重新打包这个是重点"> 按照排除规则对解压的jar重新打包(这个是重点)</a></li><li><a href="#重新打包成aar包"> 重新打包成AAR包</a></li></ul></li></ul></li></ul><h2 id="1-效果展示"><a href="#1-效果展示" class="headerlink" title="1 效果展示"></a>1 效果展示</h2><p>如excludelib/libs/exampleAAR.aar，左边是未去除的包结构，右边是去除<code>com.baidu</code>之后的：</p><img src="/排除aar-jar中冗余或者冲突包、类的脚本/1562307807.jpg" title="aar排除"><p>如excludelib/libs/exampleJAR.jar：</p><img src="/排除aar-jar中冗余或者冲突包、类的脚本/1562308266.jpg" title="jar排除展示"><h2 id="2-如何使用"><a href="#2-如何使用" class="headerlink" title="2 如何使用"></a>2 如何使用</h2><p>（1）将需要排除的aar或者jar包放在excludelib/libs下。</p><p>（2）更改excludelib/build.gradle<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要排除的aar或者jar。（替换成需要排除的）</span></span><br><span class="line">artifacts.add(<span class="string">"exclude"</span>, file(<span class="string">'libs/exampleAAR.aar'</span>))</span><br><span class="line">artifacts.add(<span class="string">"exclude"</span>, file(<span class="string">'libs/exampleJAR.jar'</span>))</span><br></pre></td></tr></table></figure></p><p>（3）设置排除规则 如果您需要排除aar，那么请更改excludelib/excludeAar.gradle；如果您需要排除jar，那么请更改excludelib/excludeJar.gradle<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要排除的包名</span></span><br><span class="line"><span class="keyword">def</span> excludePackages = [<span class="string">'com.baidu'</span>]</span><br><span class="line"><span class="comment">//需要排除的类(需要全类名)</span></span><br><span class="line"><span class="keyword">def</span> excludeClasses = []</span><br></pre></td></tr></table></figure></p><p>（4）运行排除任务</p><img src="/排除aar-jar中冗余或者冲突包、类的脚本/1562312299.jpg" title="运行排除"><p>排除后生成的aar在excludelib/build/excludeaar下，排除后生成的jar位于excludelib/build/excludejar。</p><p>然后就可以愉快的使用啦~</p><h2 id="3-如何实现的"><a href="#3-如何实现的" class="headerlink" title="3 如何实现的"></a>3 如何实现的</h2><p><strong>aar排除步骤：</strong></p><p>1、获取到需要排除的原始AAR包</p><p>2、解压AAR包（zipTree配合Task Copy）</p><p>3、解压AAR包中的class.jar（zipTree配合Task Copy）</p><p>4、按照排除规则对解压的class.jar重新打包(Task Jar)</p><p>5、重新打包成AAR包(Task Zip)</p><p><strong>jar排除步骤</strong></p><p>1、获取到需要排除的原始jar包</p><p>2、解压jar包（zipTree配合Task Copy）</p><p>3、按照排除规则对解压的jar重新打包(Task Jar)</p><h3 id="解压AAR-JAR包"><a href="#解压AAR-JAR包" class="headerlink" title="解压AAR/JAR包"></a>解压AAR/JAR包</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task unZipAar(<span class="string">type:</span> Copy) &#123;</span><br><span class="line">    <span class="keyword">def</span> zipFile = getDefaultAar()</span><br><span class="line">    <span class="keyword">def</span> outputDir = unZipAarFile</span><br><span class="line">    from zipTree(zipFile)</span><br><span class="line">    into outputDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要原理：zipTree配合Copy，实现解压。</p><p>Copy Task官方讲解：<a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Copy.html" target="_blank" rel="noopener">https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Copy.html</a></p><p>ziptree源码主要解析：创建一个新的file tree包含原来zip的内容，可以配合Copy实现解压。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Project</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Creates a new &#123;<span class="doctag">@code</span> FileTree&#125; which contains the contents of the given ZIP file.</span></span><br><span class="line"><span class="comment">     * You can combine this method with the &#123;<span class="doctag">@link</span> #copy(groovy.lang.Closure)&#125;</span></span><br><span class="line"><span class="comment">     * method to unzip a ZIP file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> zipPath The ZIP file. Evaluated as per &#123;<span class="doctag">@link</span> #file(Object)&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the file tree. Never returns null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">FileTree <span class="title">zipTree</span><span class="params">(Object zipPath)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="按照排除规则对解压的jar重新打包-这个是重点"><a href="#按照排除规则对解压的jar重新打包-这个是重点" class="headerlink" title="按照排除规则对解压的jar重新打包(这个是重点)"></a>按照排除规则对解压的jar重新打包(这个是重点)</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task zipJar(<span class="string">type:</span> Jar) &#123;</span><br><span class="line">    baseName = <span class="string">'classes'</span></span><br><span class="line">    from unZipJarFile</span><br><span class="line">    destinationDir unZipAarFile</span><br><span class="line">    exclude getExcludePackageRegex(excludePackages)</span><br><span class="line">    exclude getExcludeClassRegex(excludeClasses)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个步骤就是把之前解压的classes.jar文件，按照排除规则用Task Jar重新打包成jar文件。</p><p>Task Jar官方讲解：<a href="https://docs.gradle.org/current/dsl/org.gradle.jvm.tasks.Jar.html" target="_blank" rel="noopener">https://docs.gradle.org/current/dsl/org.gradle.jvm.tasks.Jar.html</a></p><table><thead><tr><th style="text-align:left">Property/Method</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">baseName</td><td style="text-align:left">压缩后的jar文件名。</td></tr><tr><td style="text-align:left">from(sourcePaths)</td><td style="text-align:left">需要压缩的目录。</td></tr><tr><td style="text-align:left">destinationDir</td><td style="text-align:left">压缩后存放的目录。</td></tr><tr><td style="text-align:left">exclude(excludes)</td><td style="text-align:left">需要排除的文件。</td></tr></tbody></table><h3 id="重新打包成AAR包"><a href="#重新打包成AAR包" class="headerlink" title="重新打包成AAR包"></a>重新打包成AAR包</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">task excludeAar(<span class="string">type:</span> Zip) &#123;</span><br><span class="line">    group <span class="string">'ex'</span></span><br><span class="line">    description <span class="string">'生成一个排除之后的aar包'</span></span><br><span class="line">    baseName excludeAarName</span><br><span class="line">    extension <span class="string">"aar"</span></span><br><span class="line">    from unZipAarFile</span><br><span class="line">    destinationDir excludeAarFile</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对classes.jar处理完成的aar重打包，主要用到Task Zip。</p><p>Task Zip官方讲解：<a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Zip.html" target="_blank" rel="noopener">https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Zip.html</a></p><table><thead><tr><th style="text-align:left">Property/Method</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">group</td><td style="text-align:left">setGroup(String group) 将当前的Task设置到指定组。</td></tr><tr><td style="text-align:left">description</td><td style="text-align:left">setDescription(@Nullable String description) Task描述。</td></tr><tr><td style="text-align:left">baseName</td><td style="text-align:left">压缩后的aar文件名。</td></tr><tr><td style="text-align:left">extension</td><td style="text-align:left">压缩后的文件扩展名。</td></tr><tr><td style="text-align:left">from(sourcePaths)</td><td style="text-align:left">需要压缩的目录。</td></tr><tr><td style="text-align:left">destinationDir</td><td style="text-align:left">压缩后存放的目录。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引入aar的冲突无所不在，通过远程依赖maven的包可以通过&lt;code&gt;exclude&lt;/code&gt;关键字搭配&lt;code&gt;module&lt;/code&gt;和&lt;code&gt;group&lt;/code&gt;去除某个组，没办法去除具体的类。&lt;/p&gt;
&lt;p&gt;那么如果是单独的aar包，想要排除aar下classes.jar包里的某个单独的包或者类怎么办？&lt;/p&gt;
&lt;p&gt;需要接入的jar包已经带了腾讯X5核心，当前依赖的已经包含X5核心，冲突又该如何解决呢？&lt;/p&gt;
&lt;p&gt;当前的gradle脚本（项目链接：&lt;a href=&quot;https://github.com/luohongxfb/ExcludeAar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/luohongxfb/ExcludeAar&lt;/a&gt; ）可以解决。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://sunflowercoder.com/categories/Android/"/>
    
    
  </entry>
  
</feed>
