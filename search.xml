<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小游戏--第一弹]]></title>
    <url>%2F2019%2F04%2F08%2F%E5%B0%8F%E6%B8%B8%E6%88%8F-%E7%AC%AC%E4%B8%80%E5%BC%B9%2F</url>
    <content type="text"><![CDATA[微信小游戏官方文档：https://developers.weixin.qq.com/minigame/dev/index.html?t=19040421 基础1.文件结构12├── game.js└── game.json game.js 小游戏入口文件 game.json 配置文件。全局配置，决定相关界面渲染、属性设置等（官方详细配置：https://developers.weixin.qq.com/minigame/dev/reference/configuration/app.html） 123456789101112131415&#123; "deviceOrientation": "portrait", "networkTimeout": &#123; "request": 5000, "connectSocket": 5000, "uploadFile": 5000, "downloadFile": 5000 &#125;, "navigateToMiniProgramAppIdList": ["wxe5f52902cf4de896"], "permission": &#123; "scope.userLocation": &#123; "desc": "你的位置信息将用于小游戏位置接口的效果展示" &#125; &#125;&#125; deviceOrientation：屏幕选择方向。默认’portrait’。 showStatusBar：是否显示状态栏。默认false。 networkTimeout：网络请求的超时时间，单位：毫秒。 workers：使用 Worker 处理多线程任务时，设置 Worker 代码放置的目录。 navigateToMiniProgramAppIdList：当小程序需要使用 wx.navigateToMiniProgram 接口跳转到其他小程序时，需要先在配置文件中声明需要跳转的小程序 appId 列表，最多允许填写 10 个。 permission：小游戏接口权限相关设置。授权：https://developers.weixin.qq.com/minigame/dev/tutorial/open-ability/authorize.html 2.代码包大小限制4MB 3.wx API只能使用js编写小游戏。 运行环境：JavaScript VM。无BOM、DOM]]></content>
      <categories>
        <category>小游戏</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo--GitHub Pages部署]]></title>
    <url>%2F2019%2F03%2F22%2FHexo-GitHub-Pages%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[部署到GitHub Pages请先准备一个GitHub账号，没有的话，出门右转浏览器地址栏输入：https://github.com/ Sign Up开始注册 有Git账号的准备新建仓库：https://github.com/new Repository name建议填自己用户名Owner带上.github.io 注意两点： 仓库名为[Owner].github.io时才可以通过https://[Owner].github.io访问，如果不是则需要按照原来的仓库形式，即Git地址+用户名+仓库名 仓库权限必须为Public 在Hexo项目配置文件_config.yml中，拉到底部，找到deploy配置字段，1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: #前面创建的仓库地址 branch: master message: #描述 运行hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy，没设置全局用户名的可能需要输入Git用户名密码。 等待一段时间~ 完成后在仓库的Settings中，配置Source为master branch就能通过https://[Owner].github.io访问啦~ 配置域名访问在腾讯云域名（https://www.qcloud.com/act/event/dnspod_baidu?!preview ）或阿里云域名（https://wanwang.aliyun.com/domain/?spm=a2c4g.11174283.2.1.789dc8caQX0KM1 ）购买一个域名登陆管理后台，配置云解析，添加记录将想要的前缀配置CNAME规则到git域名[Owner].github.io在仓库的Settings中GitHub Pages的Custom domain填入配置的前缀+域名即可。Enforce HTTPS会强制域名访问的时候也是通过https。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo--博客搭建]]></title>
    <url>%2F2019%2F03%2F22%2FHexo--%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本站的博客搭建采用Hexo+NexT主题，部署在GitHub Pages。下面手把手带你搭建免费高效的博客系统~ 简介Hexo–快速、简洁且高效的博客框架，基于NodeJS环境。 超快速度Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。 支持 MarkdownHexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 一键部署只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。 丰富的插件Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装安装前提： NodeJS环境：下载地址 Git：Windows | Mac 安装Hexo：1npm install -g hexo-cli 具体的安装过程的问题，这里不再过多提及。官方安装文档：https://hexo.io/zh-cn/docs/ 建站新建文件夹创建项目：123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 若需要在当前文件夹直接创建，在当前目录下hexo init。 Hexo项目目录结构：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml：网站的配置信息。官方配置文档：https://hexo.io/zh-cn/docs/configuration。 package.json：应用程序的信息。 scaffolds：模版文件夹。当您新建文章时，Hexo 会根据scaffold来建立文件。官方模板配置文档：https://hexo.io/zh-cn/docs/templates source：资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes：主题文件夹。Hexo 会根据主题来生成静态页面。 项目下的_config.yml为项目配置文件，主题下的_config.yml为主题配置文件。 执行1hexo generate &amp;&amp; hexo server --debug 即可在本地http://localhost:4000/ 查看默认的网站样式啦~ 命令新建网站项目1hexo init [folder] 如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 新建文章1hexo new [layout] &lt;title&gt; 如果没有设置 layout 的话，默认使用 网站配置_config.yml 中的 default_layout 参数代替。 如果标题包含空格的话，请使用引号括起来。 也可以简写：hexo n [layout] &lt;title&gt; 生成静态文件1hexo generate -d, –deploy 文件生成后立即部署网站 -w, –watch 监视文件变动 也可以简写：hexo g 本地启动服务器1hexo server 默认情况下，访问网址为： http://localhost:4000/。 -p, –port 重设端口 -s, –static 只使用静态文件 -l, –log 启动日记记录，使用覆盖记录格式 也可以简写：hexo s 线上部署1hexo deploy -g, –generate 部署之前预先生成静态文件 也可以简写：hexo d 部署到GitHub Pages请看这篇文章~ 清除缓存文件和已生成的静态文件1hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 更改配置文件_config.yml后需要运行该命令。不然可能会报Unhandled rejection Error: ENOENT: no such file or directory, open &#39;**&#39;。 主题Hexo的默认主题是landscape，官方推荐主题：https://hexo.io/themes/ 本博客网站使用的主题是NexT.Pisces如需要v6及以上的，请看新仓库https://github.com/theme-next/hexo-theme-next 安装先从git将主题拉下来，在项目下1git clone https://github.com/iissnan/hexo-theme-next themes/next 在项目配置文件_config.yml中查找theme，修改值为theme: next。（注意next前的空格哦） 然后hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server --debug就能看见next主题的默认样式啦 选择NexT.Pisces需要在themes/next下的主题配置文件_config.yml中查找scheme，修改值为scheme: Pisces再运行上面的重新启动，就能看到样式啦 安装Hexo和Next主题到此就结束啦~ 要说的话建议在项目下package.json中配置开发运行脚本和部署脚本，在最外层json中添加：1234"scripts": &#123; "dev": "hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server --debug", "start": "hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy" &#125;, 以后开发运行npm run dev就好啦。线上部署使用npm run start。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Scrapyd使用详解]]></title>
    <url>%2F2019%2F03%2F13%2Fscrapyd%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Scrapyd官方文档 https://scrapyd.readthedocs.io/en/latest/index.html 前言Scrapyd通常作为守护进程运行，它侦听运行爬虫的请求，并为每个请求生成一个进程，该进程基本上执行:scrapy crawl [myspider]。 Scrapyd还并行运行多个进程，将它们分配到max_proc和max_proc_per_cpu选项提供的固定数量的插槽中，启动尽可能多的进程来处理负载。 除了调度和管理进程之外，Scrapyd还提供了一个JSON web服务来上载新的项目版本(作为egg)和调度爬虫。 使用详解安装1pip install scrapyd 依赖的库及版本： Python 2.7 or above Twisted 8.0 or above Scrapy 1.0 or above six 启动在项目目录下，输入scrapyd即可运行，默认地址为http://localhost:68001scrapyd 官方详细配置文档说明：https://scrapyd.readthedocs.io/en/latest/config.html 修改默认配置信息可以在项目下新建一个scrapyd.conf或者在scrapy.cfg中增加[scrapyd]：123456[scrapyd]# 网页和Json服务监听的IP地址，默认为127.0.0.1bind_address = 127.0.0.1# 监听的端口，默认为6800http_port = 6800debug = off 项目部署部署主要分为两步： 将项目打包成egg 将egg通过Scrapyd的addversion.json接口上传到目标服务器 官方的部署上传接口文档：https://scrapyd.readthedocs.io/en/latest/api.html#addversion-json 推荐使用Scrapyd-client中的scrapyd-deploy一步上传，关于Scrapyd-client介绍： Scrapyd-client is a client for Scrapyd. It provides the general scrapyd-client and the scrapyd-deploy utility which allows you to deploy your project to a Scrapyd server. Scrapy-client安装1pip install scrapyd-client]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Scrapy线上部署</tag>
        <tag>Scrapyd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webstorm .swig文件语法高亮]]></title>
    <url>%2F2019%2F03%2F07%2Fwebstorm-swig%E6%96%87%E4%BB%B6%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%2F</url>
    <content type="text"><![CDATA[前言swig是nodeJS前端模板引擎，swig特点看这里。 语法高亮webstrom（1）在File&gt;Settings&gt;Plugins，选择下方 Browse repositories... （2）在编辑框输入 twig，点击 Twig Support，Install之后重启webstorm （3）重启后，打开File&gt;Settings&gt;Editor&gt;File Types，找到Twig，点击+号添加*.swig，apply后就能看到.swig都高亮啦~]]></content>
      <tags>
        <tag>.swig</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git出现The following problems have occurred when adding the files: *** is in submodule]]></title>
    <url>%2F2019%2F03%2F06%2Fgit%E5%87%BA%E7%8E%B0The-following-problems-have-occurred-when-adding-the-files-is-in-submodule%2F</url>
    <content type="text"><![CDATA[前言开始搭建博客的时候，使用到Next主题1git clone https://github.com/iissnan/hexo-theme-next themes/next clone下的项目内包含.git隐藏文件，删除后，更改主题的代码后提交报错，手动git add依然报错The following problems have occurred when adding the files: *** is in submodule 解决这是因为本来是其他git项目，需要清除缓存记录。1git rm -rf --cached themes/next 运行上面的代码之后，再git add就不会报错啦~]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android P报java.net.UnknownServiceException: CLEARTEXT communication to *** not permitted by netwo...]]></title>
    <url>%2F2019%2F03%2F06%2FAndroid-P%E6%8A%A5java-net-UnknownServiceException-CLEARTEXT-communication-to-not-permitted-by-netwo%2F</url>
    <content type="text"><![CDATA[原因由于 Android P 限制了明文流量的网络请求，非加密的流量请求都会被系统禁止掉。 如果当前应用的请求是 htttp 请求，而非 https ,这样就会导系统禁止当前应用进行该请求，如果 WebView 的 url 用 http 协议，同样会出现加载失败，https 不受影响。 为此，OkHttp3 做了检查，所以如果使用了明文流量，默认情况下，在 Android P 版本 OkHttp3 就抛出异常: CLEARTEXT communication to *** not permitted by network security policy 解决办法（任选一个）1.在 res 下新建一个 xml目录，然后创建一个名为：network_security_config.xml 文件 ，该文件内容如下：1234&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;network-security-config&gt; &lt;base-config cleartextTrafficPermitted="true" /&gt;&lt;/network-security-config&gt; 然后在 AndroidManifest.xml application 标签内应用上面的xml配置：android:networkSecurityConfig=&quot;@xml/network_security_config&quot;123456&lt;application android:name=".app.App" android:allowBackup="true" android:icon="@mipmap/ic_launcher" android:networkSecurityConfig="@xml/network_security_config" android:label="@string/app_name" android:theme="@style/AppTheme"&gt; 2.服务器和本地应用都改用 https 3.targetSdkVersion 降级回到 27]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android P</tag>
      </tags>
  </entry>
</search>
